repos,repo_version,filename,raw_details
ageitgey/face_recognition,latest,/docker-compose.yml,"{'version': '2.3', 'services': {'face_recognition': {'image': 'face_recognition', 'container_name': 'face_recognition', 'working_dir': '/face_recognition/examples', 'build': {'context': '.'}, 'command': 'python3 -u find_faces_in_picture_cnn.py', 'volumes': ['./:/face_recognition']}}}"
fastai/fastai,latest,/docker-compose.yml,"{'version': '3', 'services': {'fastai': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/']}, 'notebook': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'command': 'bash -c ""pip install -e . && jupyter notebook --allow-root --no-browser --ip=0.0.0.0 --port=8080 --NotebookApp.token=\'\' --NotebookApp.password=\'\'""', 'ports': ['8080:8080']}, 'watcher': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'command': 'watchmedo shell-command --command nbdev_build_docs --pattern *.ipynb --recursive --drop', 'network_mode': 'host'}, 'jekyll': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'ports': ['4000:4000'], 'command': 'bash -c ""cp -r docs_src docs && pip install . && nbdev_build_docs && cd docs && bundle i && chmod -R u+rwx . && bundle exec jekyll serve --host 0.0.0.0""\n'}}}"
RasaHQ/rasa,latest,/tests_deployment/docker-compose.integration.yml,"{'version': '3.8', 'services': {'redis': {'image': 'redis:6', 'healthcheck': {'test': ['CMD', 'redis-cli', 'ping'], 'interval': '10s', 'timeout': '5s', 'retries': 5}, 'ports': ['6379:6379']}, 'postgres': {'image': 'postgres:13', 'healthcheck': {'test': ['CMD', 'pg_isready'], 'interval': '10s', 'timeout': '5s', 'retries': 5}, 'environment': {'PGUSER': '${PGUSER}', 'POSTGRES_USER': '${POSTGRES_USER}', 'POSTGRES_PASSWORD': '${POSTGRES_PASSWORD}'}, 'ports': ['5432:5432']}, 'rabbitmq': {'image': 'healthcheck/rabbitmq', 'environment': {'RABBITMQ_DEFAULT_USER': '${RABBITMQ_USER}', 'RABBITMQ_DEFAULT_PASS': '${RABBITMQ_PASSWORD}'}, 'ports': ['5672:5672']}}}"
RasaHQ/rasa,latest,/docker/docker-compose.yml,"{'version': '3.0', 'services': {'rasa': {'image': 'rasa/rasa:latest-full', 'networks': ['rasa-network'], 'ports': ['5005:5005'], 'volumes': ['./rasa-app-data/:/app/'], 'command': ['run']}, 'action_server': {'image': 'rasa/rasa-sdk:latest', 'networks': ['rasa-network'], 'ports': ['5055:5055'], 'volumes': ['./rasa-app-data/actions:/app/actions']}, 'duckling': {'image': 'rasa/duckling:latest', 'networks': ['rasa-network'], 'ports': ['8000:8000']}}, 'networks': {'rasa-network': {}}}"
Alluxio/alluxio,latest,/integration/metrics/docker-compose-master.yaml,"{'version': '2', 'services': {'jaeger-all-in-one': {'image': 'jaegertracing/all-in-one:latest', 'ports': ['16686:16686', '14268:14268', '14250:14250']}, 'otel-collector': {'image': 'otel/opentelemetry-collector-dev:b24db545eb56e2ee7dcf6a8f3740ce49bb80608b', 'command': ['--config=/etc/otel-collector-config.yaml'], 'volumes': ['./otel-collector-config.yaml:/etc/otel-collector-config.yaml'], 'ports': ['1888:1888', '4318:4317', '8888:8888', '8889:8889', '13133:13133', '55670:55679'], 'depends_on': ['jaeger-all-in-one']}, 'otel-agent': {'image': 'otel/opentelemetry-collector-dev:b24db545eb56e2ee7dcf6a8f3740ce49bb80608b', 'command': ['--config=/etc/otel-agent-config.yaml'], 'volumes': ['./otel-agent-config.yaml:/etc/otel-agent-config.yaml'], 'ports': ['1777:1777', '4317:4317', '8887:8888', '9411', '13133', '14250', '14268', '55678', '55679:55679'], 'depends_on': ['otel-collector']}, 'prometheus': {'container_name': 'prometheus', 'image': 'prom/prometheus:latest', 'volumes': ['./prometheus.yaml:/etc/prometheus/prometheus.yml'], 'ports': ['9090:9090']}}}"
Alluxio/alluxio,latest,/integration/metrics/docker-compose-worker.yaml,"{'version': '2', 'services': {'otel-agent': {'image': 'otel/opentelemetry-collector-dev:b24db545eb56e2ee7dcf6a8f3740ce49bb80608b', 'environment': {'MASTER_IP': '${MASTER_IP}'}, 'command': ['--config=/etc/otel-agent-config-worker.yaml'], 'volumes': ['./otel-agent-config-worker.yaml:/etc/otel-agent-config-worker.yaml'], 'ports': ['1777:1777', '4317:4317', '8887:8888', '13133', '14250', '14268', '55678', '9411', '55679:55679']}}}"
mlflow/mlflow,latest,/tests/db/docker-compose.yml,"{'version': '3', 'services': {'postgres': {'image': 'postgres', 'restart': 'always', 'environment': {'POSTGRES_DB': 'mlflowdb', 'POSTGRES_USER': 'mlflowuser', 'POSTGRES_PASSWORD': 'mlflowpassword'}}, 'mlflow-postgres': {'depends_on': ['postgres'], 'build': {'context': '.'}, 'volumes': ['.:/tmp/mlflow'], 'environment': {'MLFLOW_TRACKING_URI': 'postgresql://mlflowuser:mlflowpassword@postgres:5432/mlflowdb'}, 'command': 'python run_checks.py --schema-output schemas/postgres.sql'}, 'mysql': {'image': 'mysql', 'restart': 'always', 'environment': {'MYSQL_ROOT_PASSWORD': 'root-password', 'MYSQL_DATABASE': 'mlflowdb', 'MYSQL_USER': 'mlflowuser', 'MYSQL_PASSWORD': 'mlflowpassword'}, 'command': 'mysqld --default-authentication-plugin=mysql_native_password'}, 'mlflow-mysql': {'depends_on': ['mysql'], 'build': {'context': '.'}, 'volumes': ['.:/tmp/mlflow'], 'environment': {'MLFLOW_TRACKING_URI': 'mysql://mlflowuser:mlflowpassword@mysql:3306/mlflowdb'}, 'command': 'python run_checks.py --schema-output schemas/mysql.sql'}, 'mssql': {'image': 'mcr.microsoft.com/mssql/server', 'restart': 'always', 'environment': {'ACCEPT_EULA': 'Y', 'SA_PASSWORD': '1Secure*Password1'}}, 'mlflow-mssql': {'depends_on': ['mssql'], 'build': {'context': '.', 'dockerfile': 'Dockerfile.mssql'}, 'volumes': ['.:/tmp/mlflow'], 'environment': {'MLFLOW_TRACKING_URI': 'mssql+pyodbc://mlflowuser:Mlfl*wpassword1@mssql/mlflowdb?driver=ODBC+Driver+17+for+SQL+Server'}, 'command': 'bash -ex -c ""./init-mssql-db.sh && python run_checks.py --schema-output schemas/mssql.sql""'}, 'mlflow-sqlite': {'depends_on': ['postgres'], 'build': {'context': '.'}, 'volumes': ['.:/tmp/mlflow'], 'environment': {'MLFLOW_TRACKING_URI': 'sqlite:////tmp/mlflow/mlflowdb'}, 'command': 'bash -ex -c ""rm -rf mlflowdb && python run_checks.py --schema-output schemas/sqlite.sql""'}}}"
mlflow/mlflow,latest,/examples/mlflow_artifacts/docker-compose.yml,"{'version': '3', 'services': {'minio': {'image': 'minio/minio', 'expose': ['9000'], 'ports': ['9000:9000', '9001:9001'], 'environment': {'MINIO_ROOT_USER': 'user', 'MINIO_ROOT_PASSWORD': 'password'}, 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live'], 'interval': '1s', 'timeout': '10s', 'retries': 5}, 'command': 'server /data --console-address "":9001""'}, 'minio-create-bucket': {'image': 'minio/mc', 'depends_on': {'minio': {'condition': 'service_healthy'}}, 'entrypoint': 'bash -c "" mc alias set minio http://minio:9000 user password && if ! mc ls minio | grep --quiet bucket; then\n  mc mb minio/bucket\nelse\n  echo \'bucket already exists\'\nfi ""\n'}, 'artifacts-server': {'build': {'context': '.', 'dockerfile': '${DOCKERFILE:-Dockerfile}'}, 'depends_on': ['minio-create-bucket'], 'expose': ['5500'], 'ports': ['5500:5500'], 'environment': {'MLFLOW_S3_ENDPOINT_URL': 'http://minio:9000', 'AWS_ACCESS_KEY_ID': 'user', 'AWS_SECRET_ACCESS_KEY': 'password'}, 'command': 'mlflow server --host 0.0.0.0 --port 5500 --artifacts-destination s3://bucket --gunicorn-opts ""--log-level debug"" --serve-artifacts --artifacts-only\n'}, 'postgres': {'image': 'postgres', 'restart': 'always', 'environment': {'POSTGRES_DB': 'db', 'POSTGRES_USER': 'user', 'POSTGRES_PASSWORD': 'password'}}, 'tracking-server': {'build': {'context': '.', 'dockerfile': '${DOCKERFILE:-Dockerfile}'}, 'depends_on': ['postgres', 'artifacts-server'], 'expose': ['5000'], 'ports': ['5000:5000'], 'command': 'mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://user:password@postgres:5432/db --default-artifact-root http://artifacts-server:5500/api/2.0/mlflow-artifacts/artifacts/experiments --gunicorn-opts ""--log-level debug""\n'}, 'client': {'build': {'context': '.', 'dockerfile': '${DOCKERFILE:-Dockerfile}'}, 'depends_on': ['tracking-server'], 'environment': {'MLFLOW_TRACKING_URI': 'http://tracking-server:5000'}}}}"
horovod/horovod,latest,/docker-compose.test.yml,"{'version': '2.3', 'services': {'test-cpu-base': {'build': {'context': '.', 'dockerfile': 'Dockerfile.test.cpu', 'args': {'UBUNTU_VERSION': 18.04, 'GPP_VERSION': 7, 'MPI_KIND': 'None', 'PYTHON_VERSION': 3.8, 'TENSORFLOW_PACKAGE': 'tensorflow-cpu==2.7.0', 'KERAS_PACKAGE': 'keras==2.7.0', 'PYTORCH_PACKAGE': 'torch==1.10.1+cpu', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch-lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.11.2+cpu', 'MXNET_PACKAGE': 'mxnet==1.9.0', 'PYSPARK_PACKAGE': 'pyspark==3.2.0', 'SPARK_PACKAGE': 'spark-3.2.0/spark-3.2.0-bin-hadoop2.7.tgz', 'HOROVOD_BUILD_FLAGS': 'HOROVOD_WITH_GLOO=1'}}, 'privileged': True, 'shm_size': '8gb'}, 'test-cpu-gloo-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-cpu-base'}, 'test-cpu-mpich-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'MPI_KIND': 'MPICH', 'HOROVOD_BUILD_FLAGS': 'HOROVOD_WITHOUT_GLOO=1'}}}, 'test-cpu-oneccl-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'MPI_KIND': 'ONECCL', 'HOROVOD_BUILD_FLAGS': 'HOROVOD_WITHOUT_GLOO=1'}}}, 'test-cpu-openmpi-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'MPI_KIND': 'OpenMPI', 'HOROVOD_BUILD_FLAGS': 'HOROVOD_WITHOUT_GLOO=1'}}}, 'test-cpu-openmpi-gloo-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'MPI_KIND': 'OpenMPI'}}}, 'test-cpu-gloo-py3_7-tf1_15_5-keras2_2_4-torch1_7_1-mxnet1_5_1_p0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'PYTHON_VERSION': 3.7, 'TENSORFLOW_PACKAGE': 'tensorflow==1.15.5', 'KERAS_PACKAGE': 'keras==2.2.4', 'PYTORCH_PACKAGE': 'torch==1.7.1+cpu', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.8.2+cpu', 'MXNET_PACKAGE': 'mxnet==1.5.1.post0'}}}, 'test-cpu-gloo-py3_8-tf2_5_2-keras2_5_0rc0-torch1_8_1-mxnet1_7_0_p2-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'TENSORFLOW_PACKAGE': 'tensorflow-cpu==2.5.2', 'KERAS_PACKAGE': 'keras==2.5.0rc0', 'PYTORCH_PACKAGE': 'torch==1.8.1+cpu', 'TORCHVISION_PACKAGE': 'torchvision==0.9.1', 'MXNET_PACKAGE': 'mxnet==1.7.0.post2'}}}, 'test-cpu-gloo-py3_8-tf2_6_2-keras2_6_0-torch1_9_1-mxnet1_8_0_p0-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'TENSORFLOW_PACKAGE': 'tensorflow-cpu==2.6.2', 'KERAS_PACKAGE': 'keras==2.6.0', 'PYTORCH_PACKAGE': 'torch==1.9.1+cpu', 'TORCHVISION_PACKAGE': 'torchvision==0.10.1', 'MXNET_PACKAGE': 'mxnet==1.8.0.post0'}}}, 'test-cpu-gloo-py3_8-tfhead-keras_none-torchhead-mxnethead-pyspark3_2_0': {'extends': 'test-cpu-base', 'build': {'args': {'TENSORFLOW_PACKAGE': 'tf-nightly', 'KERAS_PACKAGE': 'None', 'PYTORCH_PACKAGE': 'torch-nightly', 'TORCHVISION_PACKAGE': 'torchvision', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning', 'MXNET_PACKAGE': 'mxnet-nightly'}}}, 'test-cpu-gloo-py3_7-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark2_4_8': {'extends': 'test-cpu-base', 'build': {'args': {'PYTHON_VERSION': 3.7, 'PYSPARK_PACKAGE': 'pyspark==2.4.8', 'SPARK_PACKAGE': 'spark-2.4.8/spark-2.4.8-bin-hadoop2.7.tgz'}}}, 'test-cpu-gloo-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_1_2': {'extends': 'test-cpu-base', 'build': {'args': {'PYTHON_VERSION': 3.8, 'PYSPARK_PACKAGE': 'pyspark==3.1.2', 'SPARK_PACKAGE': 'spark-3.1.2/spark-3.1.2-bin-hadoop2.7.tgz'}}}, 'test-gpu-base': {'build': {'context': '.', 'dockerfile': 'Dockerfile.test.gpu', 'args': {'GPP_VERSION': 7, 'MPI_KIND': 'None', 'PYTHON_VERSION': 3.8, 'PYSPARK_PACKAGE': 'pyspark==3.2.0', 'SPARK_PACKAGE': 'spark-3.2.0/spark-3.2.0-bin-hadoop2.7.tgz', 'HOROVOD_BUILD_FLAGS': 'HOROVOD_GPU_OPERATIONS=NCCL', 'HOROVOD_MIXED_INSTALL': 0}}, 'runtime': 'nvidia', 'environment': ['CUDA_VISIBLE_DEVICES'], 'privileged': True, 'shm_size': '8gb'}, 'test-gpu-gloo-py3_7-tf1_15_5-keras2_2_4-torch1_7_1-mxnet1_5_1_p0-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '10.0-devel-ubuntu18.04', 'CUDNN_VERSION': '7.6.5.32-1+cuda10.1', 'NCCL_VERSION_OVERRIDE': '2.7.8-1+cuda10.1', 'PYTHON_VERSION': 3.7, 'TENSORFLOW_PACKAGE': 'tensorflow-gpu==1.15.5', 'KERAS_PACKAGE': 'keras==2.2.4', 'PYTORCH_PACKAGE': 'torch==1.7.1+cu101', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.8.2+cu101', 'MXNET_PACKAGE': 'mxnet-cu100==1.5.1.post0'}}}, 'test-gpu-gloo-py3_8-tf2_5_2-keras2_5_0rc0-torch1_8_1-mxnet1_7_0_p1-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '10.1-devel-ubuntu18.04', 'CUDNN_VERSION': '7.6.5.32-1+cuda10.1', 'NCCL_VERSION_OVERRIDE': '2.7.8-1+cuda10.1', 'TENSORFLOW_PACKAGE': 'tensorflow-gpu==2.5.2', 'KERAS_PACKAGE': 'keras==2.5.0rc0', 'PYTORCH_PACKAGE': 'torch==1.8.1+cu101', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.9.1+cu101', 'MXNET_PACKAGE': 'mxnet-cu101==1.7.0.post1'}}}, 'test-gpu-gloo-py3_8-tf2_6_2-keras2_6_0-torch1_9_1-mxnet1_8_0_p0-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '11.2.2-devel-ubuntu18.04', 'CUDNN_VERSION': '8.1.1.33-1+cuda11.2', 'NCCL_VERSION_OVERRIDE': '2.8.4-1+cuda11.2', 'TENSORFLOW_PACKAGE': 'tensorflow-gpu==2.6.2', 'KERAS_PACKAGE': 'keras==2.6.0', 'PYTORCH_PACKAGE': 'torch==1.9.1+cu111', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.10.1+cu111', 'MXNET_PACKAGE': 'mxnet-cu112==1.8.0.post0'}}}, 'test-gpu-openmpi-gloo-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '11.2.2-devel-ubuntu18.04', 'CUDNN_VERSION': '8.1.1.33-1+cuda11.2', 'NCCL_VERSION_OVERRIDE': '2.8.4-1+cuda11.2', 'MPI_KIND': 'OpenMPI', 'TENSORFLOW_PACKAGE': 'tensorflow-gpu==2.7.0', 'KERAS_PACKAGE': 'keras==2.7.0', 'PYTORCH_PACKAGE': 'torch==1.10.1+cu111', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch-lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.11.2+cu111', 'MXNET_PACKAGE': 'mxnet-cu112==1.9.0'}}}, 'test-gpu-gloo-py3_8-tfhead-keras_none-torchhead-mxnethead-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '11.2.2-devel-ubuntu18.04', 'CUDNN_VERSION': '8.1.1.33-1+cuda11.2', 'NCCL_VERSION_OVERRIDE': '2.8.4-1+cuda11.2', 'TENSORFLOW_PACKAGE': 'tf-nightly-gpu', 'KERAS_PACKAGE': 'None', 'PYTORCH_PACKAGE': 'torch-nightly-cu111', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning', 'TORCHVISION_PACKAGE': 'torchvision', 'MXNET_PACKAGE': 'mxnet-nightly-cu112'}}}, 'test-mixed-openmpi-gloo-py3_8-tf2_7_0-keras2_7_0-torch1_10_1-mxnet1_9_0-pyspark3_2_0': {'extends': 'test-gpu-base', 'build': {'args': {'CUDA_DOCKER_VERSION': '11.2.2-devel-ubuntu18.04', 'CUDNN_VERSION': '8.1.1.33-1+cuda11.2', 'NCCL_VERSION_OVERRIDE': '2.8.4-1+cuda11.2', 'MPI_KIND': 'OpenMPI', 'TENSORFLOW_PACKAGE': 'tensorflow-gpu==2.7.0', 'KERAS_PACKAGE': 'keras==2.7.0', 'PYTORCH_PACKAGE': 'torch==1.10.1+cu111', 'PYTORCH_LIGHTNING_PACKAGE': 'pytorch_lightning==1.3.8', 'TORCHVISION_PACKAGE': 'torchvision==0.11.2+cu111', 'MXNET_PACKAGE': 'mxnet-cu112==1.9.0', 'HOROVOD_BUILD_FLAGS': '', 'HOROVOD_MIXED_INSTALL': 1}}}}}"
openvinotoolkit/cvat,latest,/docker-compose.ci.yml,"{'version': '3.3', 'services': {'cvat_ci': {'image': 'cvat_ci', 'network_mode': 'host', 'build': {'context': '.', 'dockerfile': 'Dockerfile.ci'}, 'depends_on': ['cvat'], 'environment': {'COVERALLS_SERVICE_NAME': None, 'CONTAINER_COVERAGE_DATA_DIR': None, 'GITHUB_ACTIONS': None, 'GITHUB_TOKEN': None, 'GITHUB_WORKSPACE': None, 'GITHUB_REF': None, 'GITHUB_HEAD_REF': None, 'GITHUB_RUN_ID': None}, 'volumes': ['${HOST_COVERAGE_DATA_DIR}:${CONTAINER_COVERAGE_DATA_DIR}']}}}"
openvinotoolkit/cvat,latest,/docker-compose.dev.yml,"{'version': '3.3', 'services': {'cvat': {'build': {'context': '.', 'args': {'http_proxy': None, 'https_proxy': None, 'socks_proxy': None, 'CLAM_AV': None, 'INSTALL_SOURCES': None}}}, 'cvat_ui': {'build': {'context': '.', 'args': {'http_proxy': None, 'https_proxy': None, 'no_proxy': None, 'socks_proxy': None}, 'dockerfile': 'Dockerfile.ui'}}}}"
openvinotoolkit/cvat,latest,/docker-compose.yml,"{'version': '3.3', 'services': {'cvat_db': {'container_name': 'cvat_db', 'image': 'postgres:10-alpine', 'restart': 'always', 'environment': {'POSTGRES_USER': 'root', 'POSTGRES_DB': 'cvat', 'POSTGRES_HOST_AUTH_METHOD': 'trust'}, 'volumes': ['cvat_db:/var/lib/postgresql/data'], 'networks': ['cvat']}, 'cvat_redis': {'container_name': 'cvat_redis', 'image': 'redis:4.0-alpine', 'restart': 'always', 'networks': ['cvat']}, 'cvat': {'container_name': 'cvat', 'image': 'openvino/cvat_server', 'restart': 'always', 'depends_on': ['cvat_redis', 'cvat_db', 'cvat_opa'], 'environment': {'DJANGO_MODWSGI_EXTRA_ARGS': '', 'ALLOWED_HOSTS': '*', 'CVAT_REDIS_HOST': 'cvat_redis', 'CVAT_POSTGRES_HOST': 'cvat_db', 'ADAPTIVE_AUTO_ANNOTATION': 'false', 'no_proxy': 'elasticsearch,kibana,logstash,nuclio,opa,${no_proxy}'}, 'labels': ['traefik.enable=true', 'traefik.http.services.cvat.loadbalancer.server.port=8080', 'traefik.http.routers.cvat.rule=Host(`${CVAT_HOST:-localhost}`) && PathPrefix(`/api/`, `/git/`, `/opencv/`, `/analytics/`, `/static/`, `/admin`, `/documentation/`, `/django-rq`)', 'traefik.http.routers.cvat.entrypoints=web'], 'volumes': ['cvat_data:/home/django/data', 'cvat_keys:/home/django/keys', 'cvat_logs:/home/django/logs'], 'networks': ['cvat']}, 'cvat_ui': {'container_name': 'cvat_ui', 'image': 'openvino/cvat_ui', 'restart': 'always', 'depends_on': ['cvat'], 'labels': ['traefik.enable=true', 'traefik.http.services.cvat-ui.loadbalancer.server.port=80', 'traefik.http.routers.cvat-ui.rule=Host(`${CVAT_HOST:-localhost}`)', 'traefik.http.routers.cvat-ui.entrypoints=web'], 'networks': ['cvat']}, 'traefik': {'image': 'traefik:v2.4', 'container_name': 'traefik', 'restart': 'always', 'command': ['--providers.docker.exposedByDefault=false', '--providers.docker.network=cvat', '--entryPoints.web.address=:8080'], 'ports': ['8080:8080', '8090:8090'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock:ro'], 'networks': ['cvat']}, 'cvat_opa': {'container_name': 'cvat_opa', 'image': 'openpolicyagent/opa:0.34.2-rootless', 'restart': 'always', 'networks': {'cvat': {'aliases': ['opa']}}, 'volumes': ['./cvat/apps/iam/rules:/rules'], 'ports': ['8181:8181'], 'command': 'run --server --addr :8181 --set=decision_logs.console=true /rules'}}, 'volumes': {'cvat_db': None, 'cvat_data': None, 'cvat_keys': None, 'cvat_logs': None}, 'networks': {'cvat': None}}"
openvinotoolkit/cvat,latest,/docker-compose.https.yml,"{'version': '3.3', 'services': {'cvat': {'labels': ['traefik.http.routers.cvat.entrypoints=websecure', 'traefik.http.routers.cvat.tls.certresolver=lets-encrypt']}, 'cvat_ui': {'labels': ['traefik.http.routers.cvat-ui.entrypoints=websecure', 'traefik.http.routers.cvat-ui.tls.certresolver=lets-encrypt']}, 'traefik': {'image': 'traefik:v2.4', 'container_name': 'traefik', 'command': ['--providers.docker.exposedByDefault=false', '--providers.docker.network=cvat', '--entryPoints.web.address=:80', '--entryPoints.web.http.redirections.entryPoint.to=websecure', '--entryPoints.web.http.redirections.entryPoint.scheme=https', '--entryPoints.websecure.address=:443', '--certificatesResolvers.lets-encrypt.acme.email=${ACME_EMAIL:?Please set the ACME_EMAIL env variable}', '--certificatesResolvers.lets-encrypt.acme.tlsChallenge=true', '--certificatesResolvers.lets-encrypt.acme.storage=/letsencrypt/acme.json'], 'ports': ['80:80', '443:443'], 'volumes': ['cvat_letsencrypt:/letsencrypt']}}, 'volumes': {'cvat_letsencrypt': None}}"
openvinotoolkit/cvat,latest,/tests/docker-compose.file_share.yml,"{'version': '3.3', 'services': {'cvat': {'environment': {'CVAT_SHARE_URL': 'Mounted from asset for case 107 host directory'}, 'volumes': ['cvat_share:/home/django/share:rw']}}, 'volumes': {'cvat_share': {'driver_opts': {'type': 'none', 'device': 'tests/cypress/integration/actions_tasks3/assets/case_107', 'o': 'bind'}}}}"
openvinotoolkit/cvat,latest,/tests/docker-compose.email.yml,"{'version': '3.3', 'services': {'cvat': {'environment': {'DJANGO_SETTINGS_MODULE': 'tests.email_settings'}}}}"
openvinotoolkit/cvat,latest,/components/serverless/docker-compose.serverless.yml,"{'version': '3.3', 'services': {'nuclio': {'container_name': 'nuclio', 'image': 'quay.io/nuclio/dashboard:1.5.16-amd64', 'restart': 'always', 'networks': ['cvat'], 'volumes': ['/tmp:/tmp', '/var/run/docker.sock:/var/run/docker.sock'], 'environment': {'http_proxy': None, 'https_proxy': None, 'no_proxy': '172.28.0.1,${no_proxy}', 'NUCLIO_CHECK_FUNCTION_CONTAINERS_HEALTHINESS': 'true', 'NUCLIO_DASHBOARD_DEFAULT_FUNCTION_MOUNT_MODE': 'volume'}, 'ports': ['8070:8070']}, 'cvat': {'environment': {'CVAT_SERVERLESS': 1}}}, 'volumes': {'cvat_events': None}}"
openvinotoolkit/cvat,latest,/components/analytics/docker-compose.analytics.yml,"{'version': '3.3', 'services': {'elasticsearch': {'container_name': 'cvat_elasticsearch', 'image': 'cvat_elasticsearch', 'networks': ['cvat'], 'build': {'context': './components/analytics/elasticsearch', 'args': {'ELK_VERSION': '6.8.22'}}, 'volumes': ['cvat_events:/usr/share/elasticsearch/data'], 'restart': 'always'}, 'kibana': {'container_name': 'cvat_kibana', 'image': 'cvat_kibana', 'networks': ['cvat'], 'build': {'context': './components/analytics/kibana', 'args': {'ELK_VERSION': '6.8.22'}}, 'depends_on': ['elasticsearch'], 'restart': 'always'}, 'cvat_kibana_setup': {'container_name': 'cvat_kibana_setup', 'image': 'openvino/cvat_server', 'volumes': ['./components/analytics/kibana:/home/django/kibana:ro'], 'depends_on': ['cvat'], 'working_dir': '/home/django', 'networks': ['cvat'], 'entrypoint': ['bash', 'wait-for-it.sh', 'elasticsearch:9200', '-t', '0', '--', '/bin/bash', 'wait-for-it.sh', 'kibana:5601', '-t', '0', '--', 'python3', 'kibana/setup.py', 'kibana/export.json'], 'environment': {'no_proxy': 'elasticsearch,kibana,${no_proxy}'}}, 'logstash': {'container_name': 'cvat_logstash', 'image': 'cvat_logstash', 'networks': ['cvat'], 'build': {'context': './components/analytics/logstash', 'args': {'ELK_VERSION': '6.8.22', 'http_proxy': '${http_proxy}', 'https_proxy': '${https_proxy}'}}, 'environment': {'LOGSTASH_OUTPUT_HOST': 'elasticsearch:9200', 'LOGSTASH_OUTPUT_USER': None, 'LOGSTASH_OUTPUT_PASS': None}, 'depends_on': ['elasticsearch'], 'restart': 'always'}, 'cvat': {'environment': {'DJANGO_LOG_SERVER_HOST': 'logstash', 'DJANGO_LOG_SERVER_PORT': 8080, 'DJANGO_LOG_VIEWER_HOST': 'kibana', 'DJANGO_LOG_VIEWER_PORT': 5601, 'CVAT_ANALYTICS': 1}}}, 'volumes': {'cvat_events': None}}"
jina-ai/jina,latest,/tests/distributed/test_local_flow_local_remote_local/docker-compose.yml,"{'version': '3.3', 'services': {'encoder': {'image': 'test_local_flow_local_remote_local', 'build': {'context': '.', 'dockerfile': 'Dockerfiles/debianx.Dockerfile', 'args': {'PIP_TAG': 'daemon'}}, 'ports': ['8000:8000', '45000:45000', '45001:45001', '45002:45002', '45003:45003', '45004:45004', '45005:45005', '45006:45006'], 'env_file': ['tests/distributed/test_local_flow_remote_local_remote/.env'], 'expose': ['10000-60000'], 'networks': {'testing_net': {'ipv4_address': '172.28.1.1'}}}}, 'networks': {'testing_net': {'ipam': {'driver': 'default', 'config': [{'subnet': '172.28.0.0/16'}]}}}}"
jina-ai/jina,latest,/tests/distributed/test_join_local_from_remote/docker-compose.yml,"{'version': '3.3', 'services': {'flow': {'image': 'test_join_local_from_remote', 'build': {'context': '.', 'dockerfile': 'Dockerfiles/debianx.Dockerfile', 'args': {'PIP_TAG': 'daemon'}}, 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8000:8000'], 'expose': ['10000-60000'], 'env_file': ['tests/distributed/test_join_local_from_remote/.env'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad']}, 'pod_one': {'image': 'test_join_local_from_remote', 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8001:8000'], 'expose': [8000, '10000-60000'], 'env_file': ['tests/distributed/test_join_local_from_remote/.env'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad']}, 'pod_two': {'image': 'test_join_local_from_remote', 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8002:8000'], 'expose': [8000, '10000-60000'], 'env_file': ['tests/distributed/test_join_local_from_remote/.env'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad']}, 'pod_three': {'image': 'test_join_local_from_remote', 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8003:8000'], 'expose': [8000, '10000-60000'], 'env_file': ['tests/distributed/test_join_local_from_remote/.env'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad']}}}"
jina-ai/jina,latest,/tests/distributed/test_workspaces/docker-compose.yml,"{'version': '3.3', 'services': {'jinad': {'image': 'jinaai/jina:test-daemon', 'container_name': 'test_upload_simple_non_standard_rootworkspace', 'ports': ['9000:8000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/other_jinad:/tmp/jinad'], 'extra_hosts': ['host.docker.internal:host-gateway'], 'environment': ['JINA_DAEMON_DOCKERFILE=DEVEL']}}}"
jina-ai/jina,latest,/tests/distributed/test_remote_flow_dump_rolling_update/docker-compose.yml,"{'version': '3.3', 'services': {'jinad': {'image': 'jinaai/jina:test-daemon', 'environment': {'JINA_DAEMON_DOCKERFILE': 'DEVEL', 'JINA_LOG_LEVEL': 'DEBUG'}, 'container_name': 'test_remote_flow_dump_reload', 'ports': ['8000:8000', '45678:45678'], 'expose': ['10000-60000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad'], 'extra_hosts': ['host.docker.internal:host-gateway']}}}"
jina-ai/jina,latest,/tests/distributed/test_local_flow_remote_local_remote/docker-compose.yml,"{'version': '3.3', 'services': {'a': {'image': 'test_local_flow_remote_local_remote', 'build': {'context': '.', 'dockerfile': 'Dockerfiles/debianx.Dockerfile', 'args': {'PIP_TAG': 'daemon'}}, 'ports': ['8000:8000', '45000:45000', '45001:45001', '45002:45002', '45003:45003', '45004:45004', '45005:45005', '45006:45006'], 'env_file': ['tests/distributed/test_local_flow_remote_local_remote/.env'], 'expose': ['10000-60000'], 'networks': {'testing_net': {'ipv4_address': '172.28.1.1'}}}, 'b': {'image': 'test_local_flow_remote_local_remote', 'expose': [8000, '10000-60000'], 'env_file': ['tests/distributed/test_local_flow_remote_local_remote/.env'], 'networks': {'testing_net': {'ipv4_address': '172.28.1.2'}}}}, 'networks': {'testing_net': {'ipam': {'driver': 'default', 'config': [{'subnet': '172.28.0.0/16'}]}}}}"
jina-ai/jina,latest,/tests/distributed/test_rolling_update_container_runtime/docker-compose.yml,"{'version': '3.3', 'services': {'jinad': {'image': 'jinaai/jina:test-daemon', 'environment': {'JINA_DAEMON_DOCKERFILE': 'DEVEL', 'JINA_LOG_LEVEL': 'DEBUG'}, 'container_name': 'test_remote_flow_dump_reload', 'ports': ['8003:8000', '45678:45678'], 'expose': ['10000-60000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp/jinad:/tmp/jinad'], 'extra_hosts': ['host.docker.internal:host-gateway']}}}"
jina-ai/jina,latest,/tests/distributed/test_simple_hub_pods/docker-compose.yml,"{'version': '3.3', 'services': {'hubpod': {'image': 'hubpod:test', 'build': {'context': 'tests/distributed/test_simple_hub_pods/hub-mwu/', 'dockerfile': 'Dockerfile'}}, 'flow': {'image': 'test_simple_hub_pods', 'build': {'context': '.', 'dockerfile': 'Dockerfiles/debianx.Dockerfile', 'args': {'PIP_TAG': 'daemon'}}, 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8000:8000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp:/tmp']}, 'pod1': {'image': 'test_simple_hub_pods', 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8001:8000'], 'expose': [8000, '10000-60000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp:/tmp']}, 'pod2': {'image': 'test_simple_hub_pods', 'extra_hosts': {'host.docker.internal': 'host-gateway'}, 'ports': ['8002:8000'], 'expose': [8000, '10000-60000'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/tmp:/tmp']}}}"
jina-ai/jina,latest,/tests/distributed/test_local_flow_use_remote_executor/docker-compose-shards.yml,"{'version': '3.3', 'services': {'external-executor': {'image': 'jinaai/jina:test-pip', 'environment': {'JINA_LOG_LEVEL': 'DEBUG'}, 'container_name': 'test_external_executor', 'ports': ['8001:8000', '45678:45678'], 'expose': ['10000-60000'], 'networks': {'test': {'ipv4_address': '10.1.0.100'}}, 'volumes': ['/var/run/docker.sock:/var/run/docker.sock'], 'entrypoint': 'jina pod --port-in 45678 --parallel 2'}}, 'networks': {'test': {'driver': 'bridge', 'ipam': {'driver': 'default', 'config': [{'subnet': '10.1.0.0/24'}]}}}}"
jina-ai/jina,latest,/tests/distributed/test_local_flow_use_remote_executor/docker-compose.yml,"{'version': '3.3', 'services': {'external-executor': {'image': 'jinaai/jina:test-pip', 'environment': {'JINA_LOG_LEVEL': 'DEBUG'}, 'container_name': 'test_external_executor', 'ports': ['8001:8000', '45678:45678'], 'expose': ['10000-60000'], 'networks': {'test': {'ipv4_address': '10.1.0.100'}}, 'volumes': ['/var/run/docker.sock:/var/run/docker.sock'], 'entrypoint': 'jina pod --port-in 45678'}}, 'networks': {'test': {'driver': 'bridge', 'ipam': {'driver': 'default', 'config': [{'subnet': '10.1.0.0/24'}]}}}}"
doccano/doccano,latest,/docker-compose.dev.yml,"{'version': '3.7', 'services': {'backend': {'build': {'context': '.', 'dockerfile': 'backend/Dockerfile.dev'}, 'image': 'doccano_backend:dev', 'volumes': ['.:/src', 'venv:/root/.local/share'], 'environment': {'ADMIN_USERNAME': '${ADMIN_USERNAME}', 'ADMIN_PASSWORD': '${ADMIN_PASSWORD}', 'ADMIN_EMAIL': '${ADMIN_EMAIL}', 'CELERY_BROKER_URL': 'amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq', 'DATABASE_URL': 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable', 'ALLOW_SIGNUP': 'False', 'DEBUG': 'True'}, 'ports': ['8000:8000'], 'depends_on': ['postgres'], 'networks': ['network-backend', 'network-frontend']}, 'celery': {'build': {'context': '.', 'dockerfile': 'backend/Dockerfile.dev'}, 'image': 'doccano_celery:dev', 'volumes': ['.:/src', 'venv:/root/.local/share'], 'entrypoint': ['/src/tools/dev-celery.sh'], 'environment': {'PYTHONUNBUFFERED': '1', 'CELERY_BROKER_URL': 'amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq', 'DATABASE_URL': 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable'}, 'depends_on': ['postgres', 'rabbitmq'], 'networks': ['network-backend']}, 'rabbitmq': {'image': 'rabbitmq:3.8-alpine', 'environment': {'RABBITMQ_DEFAULT_USER': '${RABBITMQ_DEFAULT_USER}', 'RABBITMQ_DEFAULT_PASS': '${RABBITMQ_DEFAULT_PASS}'}, 'ports': ['5672:5672'], 'networks': ['network-backend']}, 'frontend': {'image': 'node:16.13.0', 'command': ['/src/tools/dev-nuxt.sh'], 'working_dir': '/src/frontend', 'environment': {'API_URL': 'http://backend:8000'}, 'volumes': ['.:/src', 'node_modules:/src/frontend/node_modules'], 'ports': ['3000:3000'], 'depends_on': ['backend'], 'networks': ['network-frontend']}, 'postgres': {'image': 'postgres:13.3-alpine', 'volumes': ['postgres_data:/var/lib/postgresql/data/'], 'environment': {'POSTGRES_USER': '${POSTGRES_USER}', 'POSTGRES_PASSWORD': '${POSTGRES_PASSWORD}', 'POSTGRES_DB': '${POSTGRES_DB}'}, 'networks': ['network-backend']}}, 'volumes': {'postgres_data': None, 'node_modules': None, 'venv': None}, 'networks': {'network-backend': None, 'network-frontend': None}}"
doccano/doccano,latest,/docker-compose.prod.yml,"{'version': '3.7', 'services': {'backend': {'build': {'context': '.', 'dockerfile': 'backend/Dockerfile.prod'}, 'image': 'doccano_backend:prod', 'volumes': ['static_volume:/backend/staticfiles', 'media:/backend/media'], 'environment': {'ADMIN_USERNAME': '${ADMIN_USERNAME}', 'ADMIN_PASSWORD': '${ADMIN_PASSWORD}', 'ADMIN_EMAIL': '${ADMIN_EMAIL}', 'CELERY_BROKER_URL': 'amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq', 'DATABASE_URL': 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable', 'ALLOW_SIGNUP': 'False', 'DEBUG': 'False'}, 'depends_on': ['postgres'], 'networks': ['network-backend', 'network-frontend']}, 'celery': {'build': {'context': '.', 'dockerfile': 'backend/Dockerfile.prod'}, 'image': 'doccano_celery:prod', 'volumes': ['media:/backend/media'], 'entrypoint': ['/opt/bin/prod-celery.sh'], 'environment': {'PYTHONUNBUFFERED': '1', 'CELERY_BROKER_URL': 'amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq', 'DATABASE_URL': 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable'}, 'depends_on': ['postgres', 'rabbitmq'], 'networks': ['network-backend']}, 'rabbitmq': {'image': 'rabbitmq:3.8-alpine', 'environment': {'RABBITMQ_DEFAULT_USER': '${RABBITMQ_DEFAULT_USER}', 'RABBITMQ_DEFAULT_PASS': '${RABBITMQ_DEFAULT_PASS}'}, 'ports': ['5672:5672'], 'networks': ['network-backend']}, 'nginx': {'build': {'context': '.', 'dockerfile': 'nginx/Dockerfile'}, 'environment': {'API_URL': 'http://backend:8000', 'GOOGLE_TRACKING_ID': ''}, 'volumes': ['static_volume:/static', 'media:/media'], 'ports': ['80:8080'], 'depends_on': ['backend'], 'networks': ['network-frontend']}, 'postgres': {'image': 'postgres:13.3-alpine', 'volumes': ['postgres_data:/var/lib/postgresql/data/'], 'environment': {'POSTGRES_USER': '${POSTGRES_USER}', 'POSTGRES_PASSWORD': '${POSTGRES_PASSWORD}', 'POSTGRES_DB': '${POSTGRES_DB}'}, 'networks': ['network-backend']}}, 'volumes': {'postgres_data': None, 'static_volume': None, 'media': None}, 'networks': {'network-backend': None, 'network-frontend': None}}"
heartexlabs/label-studio,latest,/docker-compose.mysql.yml,"{'version': '3.3', 'services': {'app': {'environment': ['DJANGO_DB=mysql', 'MYSQL_NAME=labelstudio', 'MYSQL_USER=root', 'MYSQL_PASSWORD=password', 'MYSQL_PORT=3306', 'MYSQL_HOST=db', 'POSTGRE_HOST=']}, 'db': {'image': 'mysql:8', 'hostname': 'db', 'restart': 'always', 'environment': ['MYSQL_ROOT_PASSWORD=password', 'MYSQL_DATABASE=labelstudio'], 'volumes': ['${MYSQL_DATA_DIR:-./mysql-data}:/var/lib/mysql']}}}"
heartexlabs/label-studio,latest,/docker-compose.yml,"{'version': '3.3', 'services': {'nginx': {'image': 'nginx:1.21', 'ports': ['8080:80', '8081:443'], 'depends_on': ['app'], 'environment': ['LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}', 'NGINX_FILE=${NGINX_FILE:-default.conf}'], 'volumes': [{'source': 'static', 'target': '/label-studio/label_studio', 'type': 'volume', 'volume': {'nocopy': True}}, './mydata:/label-studio/data:rw', './deploy/nginx/${NGINX_FILE:-default.conf}:/etc/nginx/templates/${NGINX_FILE:-default.conf}.template', './deploy/nginx/scripts:/docker-entrypoint.d/label-studio', './deploy/nginx/certs:/certs:ro'], 'command': 'nginx -g ""daemon off;""'}, 'app': {'stdin_open': True, 'tty': True, 'build': '.', 'image': 'heartexlabs/label-studio:latest', 'expose': ['8080'], 'depends_on': ['db'], 'environment': ['DJANGO_DB=default', 'POSTGRE_NAME=postgres', 'POSTGRE_USER=postgres', 'POSTGRE_PASSWORD=', 'POSTGRE_PORT=5432', 'POSTGRE_HOST=db', 'LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-}', 'LABEL_STUDIO_COPY_STATIC_DATA=true'], 'volumes': ['./mydata:/label-studio/data:rw', {'source': 'static', 'target': '/label-studio/static_volume', 'type': 'volume', 'volume': {'nocopy': True}}]}, 'db': {'image': 'postgres:11.5', 'hostname': 'db', 'restart': 'always', 'environment': ['POSTGRES_HOST_AUTH_METHOD=trust'], 'volumes': ['${POSTGRES_DATA_DIR:-./postgres-data}:/var/lib/postgresql/data', './deploy/pgsql/certs:/var/lib/postgresql/certs:ro']}}, 'volumes': {'static': {}}}"
heartexlabs/label-studio,latest,/.devcontainer/docker-compose.yml,"{'version': '3.3', 'services': {'app': {'volumes': ['.:/workspace:cached'], 'command': '/bin/sh -c ""while sleep 1000; do :; done""'}}}"
alibaba/Alink,latest,/webui/tools/nfs/docker-compose.yml,"{'version': '3.7', 'services': {'nfs-server': {'image': 'alink_nfs:v0.1', 'ports': ['2049:2049'], 'cap_add': ['SYS_ADMIN', 'SETPCAP'], 'environment': {'SHARED_DIRECTORY': '/shared'}, 'privileged': True, 'volumes': ['nfs-shared-data:/shared'], 'entrypoint': ['/bin/sh', '-c', ""echo 'start'&&chmod 777 /shared&&/usr/bin/nfsd.sh""]}}, 'volumes': {'nfs-shared-data': None}}"
alibaba/Alink,latest,/webui/tools/docker-compose/alink/docker-compose.yml,"{'version': '3.7', 'services': {'server': {'image': 'alink_server:v0.1', 'ports': ['8080:8080'], 'restart': 'always', 'environment': {'ALINK_REMOTE_CLUSTER_HOST': 'flink-jobmanager', 'ALINK_REMOTE_CLUSTER_PORT': 8081, 'SPRING_DATASOURCE_URL': 'jdbc:mysql://db:3306/alink?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false', 'SPRING_DATASOURCE_USERNAME': 'alinkalink', 'SPRING_DATASOURCE_PASSWORD': 'alinkalink'}, 'volumes': ['shared-data:/alink'], 'depends_on': ['db'], 'networks': ['backend', 'frontend']}, 'web': {'image': 'alink_web:v0.1', 'ports': ['9090:9090'], 'restart': 'always', 'depends_on': ['server'], 'networks': ['frontend']}, 'db': {'image': 'mysql:5.7', 'ports': ['3306:3306'], 'restart': 'always', 'environment': {'MYSQL_DATABASE': 'alink', 'MYSQL_USER': 'alinkalink', 'MYSQL_PASSWORD': 'alinkalink', 'MYSQL_ROOT_PASSWORD': 'root'}, 'volumes': ['db-data:/var/lib/mysql'], 'networks': ['backend']}, 'flink-jobmanager': {'image': 'flink_with_alink_jar:v0.1', 'ports': ['8081:8081'], 'restart': 'always', 'networks': ['backend', 'flink'], 'environment': {'FLINK_PROPERTIES': 'jobmanager.rpc.address: flink-jobmanager\njobmanager.heap.size: 2048m\ntaskmanager.heap.size: 2048m\nclassloader.resolve-order: parent-first\ntaskmanager.memory.preallocate: true\ntaskmanager.memory.off-heap: true\ntaskmanager.memory.fraction: 0.3f\nakka.ask.timeout: 60s\nakka.client.timeout: 120s'}, 'volumes': ['shared-data:/alink'], 'command': 'jobmanager'}, 'flink-taskmanager': {'image': 'flink_with_alink_jar:v0.1', 'depends_on': ['flink-jobmanager'], 'networks': ['flink'], 'environment': {'FLINK_PROPERTIES': 'jobmanager.rpc.address: flink-jobmanager\ntaskmanager.numberOfTaskSlots: 1\njobmanager.heap.size: 2048m\ntaskmanager.heap.size: 2048m\nclassloader.resolve-order: parent-first\ntaskmanager.memory.preallocate: true\ntaskmanager.memory.off-heap: true\ntaskmanager.memory.fraction: 0.3f\nakka.ask.timeout: 60s\nakka.client.timeout: 120s'}, 'volumes': ['shared-data:/alink'], 'command': 'taskmanager', 'deploy': {'replicas': 2}}, 'notebook': {'image': 'alink_notebook:v0.1', 'ports': ['8888:8888'], 'networks': ['backend'], 'volumes': ['notebook-data:/home/jovyan/', 'shared-data:/alink'], 'command': ""start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''""}}, 'volumes': {'db-data': None, 'notebook-data': None, 'shared-data': {'driver': 'local', 'driver_opts': {'type': 'nfs', 'o': 'nfsvers=4,addr=localhost,rw', 'device': ':/'}}}, 'networks': {'backend': None, 'frontend': None, 'flink': None}}"
alibaba/Alink,latest,/webui/tools/docker-compose/alink/nfs/docker-compose.yml,"{'version': '3.7', 'services': {'nfs-server': {'image': 'alink_nfs:v0.1', 'ports': ['2049:2049'], 'cap_add': ['SYS_ADMIN', 'SETPCAP'], 'environment': {'SHARED_DIRECTORY': '/shared'}, 'privileged': True, 'volumes': ['nfs-shared-data:/shared'], 'entrypoint': ['/bin/sh', '-c', ""echo 'start'&&chmod 777 /shared&&/usr/bin/nfsd.sh""]}}, 'volumes': {'nfs-shared-data': None}}"
alfredfrancis/ai-chatbot-framework,latest,/docker-compose.yml,"{'version': '2', 'services': {'iky_backend': {'container_name': 'iky_backend', 'build': '.', 'environment': {'APPLICATION_ENV': 'Production'}, 'depends_on': ['mongodb']}, 'iky_gateway': {'container_name': 'iky_gateway', 'build': 'frontend/', 'ports': ['8080:80'], 'depends_on': ['iky_backend']}, 'mongodb': {'container_name': 'mongodb', 'image': 'mongo', 'hostname': 'mongodb', 'ports': ['27017:27017'], 'volumes': ['mongodbdata:/data']}}, 'volumes': {'mongodbdata': None}}"
SeldonIO/seldon-core,latest,/executor/samples/local/metadata/docker-compose.yml,"{'version': '3.1', 'services': {'default': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9000:5000']}, 'model_1': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9001:5000'], 'environment': ['NODE_NAME=Model 1']}, 'model_2': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9002:5000'], 'environment': ['NODE_NAME=Model 2']}, 'model_combiner': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9010:5000'], 'environment': ['NODE_NAME=Model Combiner']}, 'model_a1': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9011:5000'], 'environment': ['NODE_NAME=Model A1']}, 'model_a2': {'build': {'context': '.'}, 'ports': ['127.0.0.1:9012:5000'], 'environment': ['NODE_NAME=Model A2']}}}"
tensorflow/tfx,latest,/tfx/examples/containers/workshop/docker-compose.yaml,"{'version': '3', 'services': {'tfx': {'build': {'context': './buildfiles', 'dockerfile': 'Dockerfile'}, 'image': 'gcr.io/tfx-oss-public/tfx-workshop:latest', 'ports': ['4040:4040', '6006:6006', '8080:8080', '8081:8081', '8888:8888', '8099:8099'], 'volumes': ['$WSHOME/airflow:/root/airflow'], 'stdin_open': True, 'tty': True, 'entrypoint': '/bin/bash'}}}"
4paradigm/OpenMLDB,latest,/demo/predict-taxi-trip-duration-nb/docker-compose.test.yml,"{'version': '3.9', 'services': {'sut': {'build': {'context': '.'}, 'volumes': ['./test:/work/taxi-trip/test'], 'command': 'bash -c "" ./init.sh && python3 test/import.py""\n'}}}"
volcano-sh/volcano,latest,/vendor/github.com/onsi/gomega/docker-compose.yaml,"{'version': '3.0', 'services': {'test': {'build': {'dockerfile': 'Dockerfile', 'context': '.'}, 'working_dir': '/app', 'volumes': ['${PWD}:/app']}}}"
feast-dev/feast,latest,/infra/docker-compose/docker-compose.dev.yml,"{'version': '3.7', 'services': {'core': {'image': 'maven:3.6-openjdk-11', 'volumes': ['${HOME}/.m2:/root/.m2:delegated', '../../.:/code:cached'], 'environment': {'DB_HOST': 'db', 'FEAST_STREAM_OPTIONS_BOOTSTRAPSERVERS': 'kafka:9092', 'GOOGLE_APPLICATION_CREDENTIALS': '/etc/gcloud/service-accounts/key.json'}, 'restart': 'on-failure', 'depends_on': ['db', 'kafka'], 'ports': ['6565:6565'], 'working_dir': '/code', 'command': ['mvn', '-pl', 'core', 'spring-boot:run']}, 'jupyter': {'image': 'gcr.io/kf-feast/feast-jupyter:${FEAST_VERSION}', 'volumes': ['${GCP_SERVICE_ACCOUNT}:/etc/gcloud/service-accounts/key.json'], 'depends_on': ['core'], 'environment': {'FEAST_CORE_URL': 'core:6565', 'FEAST_SERVING_URL': 'online_serving:6566', 'FEAST_HISTORICAL_SERVING_URL': 'historical_serving:6567', 'GOOGLE_APPLICATION_CREDENTIALS': '/etc/gcloud/service-accounts/key.json'}, 'ports': ['8888:8888']}, 'kafka': {'image': 'confluentinc/cp-kafka:5.2.1', 'environment': {'KAFKA_ZOOKEEPER_CONNECT': 'zookeeper:2181', 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR': 1, 'KAFKA_ADVERTISED_LISTENERS': 'INSIDE://kafka:9092,OUTSIDE://localhost:9094', 'KAFKA_LISTENERS': 'INSIDE://:9092,OUTSIDE://:9094', 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP': 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT', 'KAFKA_INTER_BROKER_LISTENER_NAME': 'INSIDE'}, 'ports': ['9092:9092', '9094:9094'], 'depends_on': ['zookeeper']}, 'zookeeper': {'image': 'confluentinc/cp-zookeeper:5.2.1', 'environment': {'ZOOKEEPER_CLIENT_PORT': 2181}}, 'db': {'image': 'postgres:12-alpine', 'environment': {'POSTGRES_PASSWORD': 'password'}, 'ports': ['5432:5432']}}}"
feast-dev/feast,latest,/infra/docker-compose/docker-compose.yml,"{'version': '3.7', 'services': {'core': {'image': 'gcr.io/kf-feast/feast-core:${FEAST_VERSION}', 'volumes': ['${FEAST_CORE_CONFIG}:/etc/feast/application.yml'], 'environment': {'DB_HOST': 'db'}, 'restart': 'on-failure', 'depends_on': ['db'], 'ports': ['6565:6565'], 'command': ['java', '-jar', '/opt/feast/feast-core.jar', 'classpath:/application.yml,file:/etc/feast/application.yml']}, 'jobservice': {'image': 'gcr.io/kf-feast/feast-jobservice:${FEAST_VERSION}', 'depends_on': ['core'], 'ports': ['6568:6568'], 'volumes': ['$PWD:/shared'], 'environment': {'FEAST_CORE_URL': 'core:6565', 'FEAST_SERVING_URL': 'online_serving:6566', 'FEAST_SPARK_LAUNCHER': 'standalone', 'FEAST_SPARK_STANDALONE_MASTER': 'local', 'FEAST_SPARK_HOME': '/usr/local/spark', 'FEAST_SPARK_STAGING_LOCATION': 'file:///shared/staging', 'FEAST_HISTORICAL_FEATURE_OUTPUT_LOCATION': 'file:///shared/historical_feature_output', 'FEAST_HISTORICAL_FEATURE_OUTPUT_FORMAT': 'parquet', 'FEAST_REDIS_HOST': 'redis', 'FEAST_SPARK_INGESTION_JAR': '${INGESTION_JAR_PATH}', 'FEAST_STATSD_ENABLED': 'true', 'FEAST_STATSD_HOST': 'prometheus_statsd', 'FEAST_STATSD_PORT': 9125}}, 'jupyter': {'image': 'gcr.io/kf-feast/feast-jupyter:${FEAST_VERSION}', 'volumes': ['${GCP_SERVICE_ACCOUNT}:/etc/gcloud/service-accounts/key.json', '$PWD:/shared'], 'depends_on': ['core'], 'environment': {'FEAST_CORE_URL': 'core:6565', 'FEAST_SERVING_URL': 'online_serving:6566', 'FEAST_SPARK_LAUNCHER': 'standalone', 'FEAST_SPARK_STANDALONE_MASTER': 'local', 'FEAST_SPARK_HOME': '/usr/local/spark', 'FEAST_SPARK_STAGING_LOCATION': 'file:///shared/staging', 'FEAST_HISTORICAL_FEATURE_OUTPUT_LOCATION': 'file:///shared/historical_feature_output', 'FEAST_HISTORICAL_FEATURE_OUTPUT_FORMAT': 'parquet', 'FEAST_REDIS_HOST': 'redis', 'GOOGLE_APPLICATION_CREDENTIALS': '/etc/gcloud/service-accounts/key.json'}, 'ports': ['8888:8888']}, 'kafka': {'image': 'confluentinc/cp-kafka:5.2.1', 'environment': {'KAFKA_ZOOKEEPER_CONNECT': 'zookeeper:2181', 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR': 1, 'KAFKA_ADVERTISED_LISTENERS': 'INSIDE://kafka:9092,OUTSIDE://localhost:9094', 'KAFKA_LISTENERS': 'INSIDE://:9092,OUTSIDE://:9094', 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP': 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT', 'KAFKA_INTER_BROKER_LISTENER_NAME': 'INSIDE'}, 'ports': ['9092:9092', '9094:9094'], 'depends_on': ['zookeeper']}, 'zookeeper': {'image': 'confluentinc/cp-zookeeper:5.2.1', 'environment': {'ZOOKEEPER_CLIENT_PORT': 2181}}, 'db': {'image': 'postgres:12-alpine', 'environment': {'POSTGRES_PASSWORD': 'password'}, 'ports': ['5432:5432']}, 'online_serving': {'image': 'gcr.io/kf-feast/feast-serving:${FEAST_VERSION}', 'volumes': ['${FEAST_ONLINE_SERVING_CONFIG}:/etc/feast/application.yml'], 'depends_on': ['core', 'redis'], 'ports': ['6566:6566'], 'restart': 'on-failure', 'command': ['java', '-jar', '/opt/feast/feast-serving.jar', 'classpath:/application.yml,file:/etc/feast/application.yml']}, 'redis': {'image': 'redis:5-alpine', 'ports': ['6379:6379']}, 'prometheus_statsd': {'image': 'prom/statsd-exporter:v0.12.1', 'ports': ['9125:9125', '9102:9102']}}}"
feast-dev/feast,latest,/java/serving/src/test/resources/docker-compose/docker-compose-redis-it.yml,"{'version': '3', 'services': {'redis': {'image': 'redis:6.2', 'ports': ['6379:6379']}, 'materialize': {'build': 'feast10', 'links': ['redis']}}}"
zhenghaoz/gorse,latest,/misc/database_test/docker-compose.yml,"{'version': '3', 'services': {'redis': {'image': 'redis:5.0', 'ports': ['6379:6379']}, 'pika': {'image': 'zhenghaoz/pika', 'restart': 'unless-stopped', 'ports': ['9221:9221']}, 'mysql': {'image': 'mysql:8.0', 'ports': ['3306:3306'], 'environment': {'MYSQL_ROOT_PASSWORD': 'password'}}, 'postgres': {'image': 'postgres:10.0', 'ports': ['5432:5432'], 'environment': {'POSTGRES_USER': 'gorse', 'POSTGRES_PASSWORD': 'gorse_pass'}}, 'mongo': {'image': 'mongo:4.0', 'ports': ['27017:27017'], 'environment': {'MONGO_INITDB_ROOT_USERNAME': 'root', 'MONGO_INITDB_ROOT_PASSWORD': 'password'}}, 'clickhouse': {'image': 'yandex/clickhouse-server:21.10', 'ports': ['8123:8123']}}}"
zhenghaoz/gorse,latest,/docker/docker-compose.yml,"{'version': '3', 'services': {'redis': {'image': 'redis', 'restart': 'unless-stopped', 'ports': ['6379:6379']}, 'mysql': {'image': 'mysql/mysql-server', 'restart': 'unless-stopped', 'ports': ['3306:3306'], 'environment': {'MYSQL_ROOT_PASSWORD': 'root_pass', 'MYSQL_DATABASE': 'gorse', 'MYSQL_USER': 'gorse', 'MYSQL_PASSWORD': 'gorse_pass'}, 'volumes': ['./var/lib/mysql:/var/lib/mysql']}, 'worker': {'image': 'zhenghaoz/gorse-worker', 'restart': 'unless-stopped', 'ports': ['8089:8089'], 'command': '--master-host master --master-port 8086 --http-host 0.0.0.0 --http-port 8089 --log-path /var/log/gorse/worker.log --cache-path /var/lib/gorse/worker_cache.data\n', 'volumes': ['./var/log/gorse:/var/log/gorse', './var/lib/gorse:/var/lib/gorse']}, 'server': {'image': 'zhenghaoz/gorse-server', 'restart': 'unless-stopped', 'ports': ['8087:8087'], 'command': '--master-host master --master-port 8086 --http-host 0.0.0.0 --http-port 8087 --log-path /var/log/gorse/server.log --cache-path /var/lib/gorse/server_cache.data\n', 'volumes': ['./var/log/gorse:/var/log/gorse', './var/lib/gorse:/var/lib/gorse']}, 'master': {'image': 'zhenghaoz/gorse-master', 'restart': 'unless-stopped', 'ports': ['8086:8086', '8088:8088'], 'command': '-c /etc/gorse/config.toml --log-path /var/log/gorse/master.log --cache-path /var/lib/gorse/master_cache.data', 'volumes': ['./config.toml:/etc/gorse/config.toml', './var/log/gorse:/var/log/gorse', './var/lib/gorse:/var/lib/gorse']}}}"
infinitered/nsfwjs,latest,/example/manual-testing/docker-compose.yml,"{'version': '3', 'services': {'nginx': {'image': 'nginx:1.19.1', 'container_name': 'nginx', 'volumes': ['./default.conf:/etc/nginx/conf.d/default.conf', './data:/usr/share/nginx/html/data', '../../dist:/usr/share/nginx/html/data/dist'], 'ports': ['80:80', '443:443']}}}"
hooram/ownphotos,latest,/docker-compose.yml,"{'version': '2', 'services': {'proxy': {'image': 'guysoft/ownphotos-proxy', 'tty': True, 'container_name': 'ownphotos-proxy', 'restart': 'always', 'links': ['backend:backend', 'frontend:frontend'], 'ports': ['3000:80']}, 'ownphotos-db': {'image': 'postgres', 'container_name': 'ownphotos-db', 'restart': 'always', 'environment': ['POSTGRES_PASSWORD=AaAa1234', 'POSTGRES_DB=ownphotos'], 'volumes': ['ownphotos-data:/var/lib/postgresql/data']}, 'frontend': {'container_name': 'ownphotos-frontend', 'image': 'guysoft/ownphotos-frontend:dev', 'tty': True, 'environment': ['BACKEND_HOST=localhost:3000'], 'links': ['backend:backend']}, 'backend': {'image': 'hooram/ownphotos:dev', 'container_name': 'ownphotos-backend', 'volumes': ['$HOME/Pictures/:/data', '$HOME/ownphotos_media:/code/protected_media'], 'environment': ['SECRET_KEY=change_meme', 'BACKEND_HOST=backend', 'ADMIN_EMAIL=admin@example.com', 'ADMIN_USERNAME=admin', 'ADMIN_PASSWORD=admin', 'DEBUG=true', 'DB_BACKEND=postgresql', 'DB_NAME=ownphotos', 'DB_USER=postgres', 'DB_PASS=AaAa1234', 'DB_HOST=ownphotos-db', 'DB_PORT=5432', 'REDIS_HOST=ownphotos-redis', 'REDIS_PORT=6379', 'MAPBOX_API_KEY=CHANGE_MEAAAA', 'TIME_ZONE=UTC'], 'links': ['ownphotos-db:ownphotos-db', 'ownphotos-redis:ownphotos-redis']}, 'ownphotos-redis': {'image': 'redis', 'container_name': 'ownphotos-redis'}}, 'volumes': {'ownphotos-data': None, 'media': None}}"
hooram/ownphotos,latest,/docker-compose.yml.template,"{'version': '2', 'services': {'proxy': {'image': 'guysoft/ownphotos-proxy', 'tty': True, 'container_name': 'ownphotos-proxy', 'restart': 'always', 'links': ['backend:backend', 'frontend:frontend'], 'ports': ['3000:80']}, 'ownphotos-db': {'image': 'postgres', 'container_name': 'ownphotos-db', 'restart': 'always', 'environment': ['POSTGRES_PASSWORD=AaAa1234', 'POSTGRES_DB=ownphotos'], 'volumes': ['ownphotos-data:/var/lib/postgresql/data']}, 'frontend': {'image': 'hooram/ownphotos-frontend:dev', 'container_name': 'ownphotos-frontend', 'tty': True, 'environment': ['BACKEND_HOST=localhost:3000'], 'links': ['backend:backend']}, 'backend': {'image': 'hooram/ownphotos:dev', 'container_name': 'ownphotos-backend', 'volumes': ['/photos/on/host:/data', '/path/to/store/thumbnails/on/host:/code/protected_media', '/path/to/store/logs/on/host:/code/logs'], 'environment': ['SECRET_KEY=changeme', 'BACKEND_HOST=backend', 'ADMIN_EMAIL=admin@example.com', 'ADMIN_USERNAME=demo', 'ADMIN_PASSWORD=demo1234', 'DEBUG=false', 'DB_BACKEND=postgresql', 'DB_NAME=ownphotos', 'DB_USER=postgres', 'DB_PASS=AaAa1234', 'DB_HOST=ownphotos-db', 'DB_PORT=5432', 'REDIS_HOST=ownphotos-redis', 'REDIS_PORT=6379', 'MAPBOX_API_KEY=apikey'], 'links': ['ownphotos-db:ownphotos-db', 'ownphotos-redis:ownphotos-redis']}, 'ownphotos-redis': {'image': 'redis', 'container_name': 'ownphotos-redis'}}, 'volumes': {'ownphotos-data': None, 'media': None}}"
bentoml/BentoML,latest,/docs/source/guides/configs/docker-compose.yml,"{'version': '3.7', 'volumes': {'prometheus_data': None, 'grafana_data': None}, 'networks': {'shared-network': None}, 'services': {'prometheus': {'image': 'prom/prometheus', 'volumes': ['./prometheus/:/etc/prometheus/', 'prometheus_data:/prometheus'], 'command': ['--config.file=/etc/prometheus/prometheus.yml', '--storage.tsdb.path=/prometheus', '--web.console.libraries=/usr/share/prometheus/console_libraries', '--web.console.templates=/usr/share/prometheus/consoles', '--web.enable-lifecycle', '--web.enable-admin-api'], 'ports': ['9090:9090'], 'networks': ['shared-network'], 'deploy': {'placement': {'constraints': ['node.role==manager']}, 'restart_policy': {'condition': 'on-failure'}}}, 'grafana': {'image': 'grafana/grafana', 'depends_on': ['prometheus'], 'ports': ['3000:3000'], 'volumes': ['grafana_data:/var/lib/grafana', './grafana/provisioning/:/etc/grafana/provisioning/'], 'env_file': ['./grafana/config.monitoring'], 'networks': ['shared-network'], 'user': '472', 'deploy': {'placement': {'constraints': ['node.role==manager']}, 'mode': 'global', 'restart_policy': {'condition': 'on-failure'}}}, 'bentoml': {'image': 'bentoml/fashion-mnist-classifier:latest', 'ports': ['5000:5000'], 'networks': ['shared-network'], 'deploy': {'mode': 'global', 'restart_policy': {'condition': 'on-failure'}}}}}"
deepjavalibrary/djl,latest,/jupyter/docker-compose.yml,"{'version': '2.4', 'services': {'deepjavalibrary_container': {'build': {'context': '.', 'dockerfile': 'Dockerfile'}, 'ports': ['8888:8888'], 'volumes': ['./:/home/jupyter'], 'restart': 'always'}}}"
jsbroks/coco-annotator,latest,/docker-compose.gpu.yml,"{'version': '3', 'networks': {'cocoannotator': {'external': False}}, 'services': {'webserver': {'image': 'annotator_webclient_gpu', 'container_name': 'annotator_webclient', 'restart': 'no', 'ports': ['5000:5000'], 'environment': ['SECRET_KEY=RandomSecretKeyHere', 'FILE_WATCHER=true', 'NAME=Test Annotator', 'MASK_RCNN_FILE=/models/mask_rcnn_coco.h5', ""MASK_RCNN_CLASSES= BG,person,bicycle,car,motorcycle,airplane, bus,train,truck,boat,traffic light, fire hydrant,stop sign,parking meter,bench,bird, cat,dog,horse,sheep,cow,elephant,bear, zebra,giraffe,backpack,umbrella,handbag,tie, suitcase,frisbee,skis,snowboard,sports ball, kite,baseball bat,baseball glove,skateboard, surfboard,tennis racket,bottle,wine glass,cup, fork,knife,spoon,bowl,banana',apple, sandwich,orange,broccoli,carrot,hot dog,pizza, donut,cake,chair,couch,potted plant,bed, dining table,toilet,tv,laptop,mouse,remote, keyboard,cell phone,microwave,oven,toaster, sink,refrigerator,book,clock,vase,scissors, teddy bear,hair drier,toothbrush""], 'volumes': ['./datasets:/datasets', './models:/models'], 'depends_on': ['database', 'workers'], 'networks': ['cocoannotator']}, 'workers': {'container_name': 'annotator_workers', 'image': 'annotator_workers_gpu', 'volumes': ['./backend/config:/workspace/config', './backend/webserver:/workspace/webserver', './backend/workers:/workspace/workers', './backend/database:/workspace/database', './datasets:/datasets'], 'depends_on': ['messageq', 'database'], 'ports': ['5555:5555'], 'networks': ['cocoannotator']}, 'messageq': {'image': 'rabbitmq:3', 'container_name': 'annotator_message_q', 'environment': ['RABBITMQ_DEFAULT_USER=user', 'RABBITMQ_DEFAULT_PASS=password'], 'ports': ['5672:5672'], 'networks': ['cocoannotator']}, 'database': {'image': 'mongo:4.0', 'container_name': 'annotator_mongodb', 'restart': 'no', 'environment': ['MONGO_DATA_DIR=/data/db', 'MONGO_LOG_DIR=/dev/null'], 'volumes': ['./db:/data/db'], 'ports': ['27017:27017'], 'command': 'mongod --smallfiles --logpath=/dev/null', 'networks': ['cocoannotator']}}}"
jsbroks/coco-annotator,latest,/docker-compose.dev.yml,"{'version': '3', 'volumes': {'mongodb_data': {'external': False}}, 'networks': {'cocoannotator': {'external': False}}, 'services': {'frontend': {'container_name': 'annotator_client', 'build': {'context': '.', 'dockerfile': './client/Dockerfile'}, 'ports': ['8080:8080'], 'volumes': ['./client:/workspace/client'], 'networks': ['cocoannotator'], 'depends_on': ['webserver']}, 'webserver': {'container_name': 'annotator_webserver', 'build': {'context': '.', 'dockerfile': './backend/webserver/Dockerfile'}, 'ports': ['5000:5000'], 'volumes': ['./backend/config:/workspace/config', './backend/webserver:/workspace/webserver', './backend/workers:/workspace/workers', './backend/database:/workspace/database', './datasets:/datasets', './models:/models'], 'environment': ['FILE_WATCHER=true', 'FLASK_APP=webserver', 'FLASK_ENV=development', 'DEBUG=true'], 'networks': ['cocoannotator'], 'depends_on': ['database', 'workers']}, 'workers': {'container_name': 'annotator_workers', 'build': {'context': '.', 'dockerfile': './backend/workers/Dockerfile'}, 'volumes': ['./backend/config:/workspace/config', './backend/webserver:/workspace/webserver', './backend/workers:/workspace/workers', './backend/database:/workspace/database', './datasets:/datasets'], 'depends_on': ['messageq', 'database'], 'ports': ['5555:5555'], 'networks': ['cocoannotator']}, 'database': {'image': 'mongo:4.0', 'container_name': 'annotator_mongodb', 'environment': ['MONGO_DATA_DIR=/data/db', 'MONGO_LOG_DIR=/dev/null'], 'volumes': ['mongodb_data:/data/db'], 'ports': ['27017:27017'], 'command': 'mongod --smallfiles --logpath=/dev/null', 'networks': ['cocoannotator']}, 'messageq': {'image': 'rabbitmq:3', 'container_name': 'annotator_message_q', 'environment': ['RABBITMQ_DEFAULT_USER=user', 'RABBITMQ_DEFAULT_PASS=password'], 'ports': ['5672:5672'], 'networks': ['cocoannotator']}}}"
jsbroks/coco-annotator,latest,/docker-compose.build.yml,"{'version': '3', 'volumes': {'mongodb_data': {'external': False}}, 'networks': {'cocoannotator': {'external': False}}, 'services': {'webserver': {'build': {'context': '.', 'dockerfile': './Dockerfile'}, 'container_name': 'annotator_webclient', 'restart': 'always', 'ports': ['5000:5000'], 'environment': ['SECRET_KEY=RandomSecretKeyHere', 'FILE_WATCHER=true', 'NAME=Test Annotator'], 'volumes': ['./datasets:/datasets', './models:/models'], 'depends_on': ['database', 'workers'], 'networks': ['cocoannotator']}, 'workers': {'container_name': 'annotator_workers', 'build': {'context': '.', 'dockerfile': './backend/workers/Dockerfile'}, 'volumes': ['./backend/config:/workspace/config', './backend/webserver:/workspace/webserver', './backend/workers:/workspace/workers', './backend/database:/workspace/database', './datasets:/datasets'], 'depends_on': ['messageq', 'database'], 'ports': ['5555:5555'], 'networks': ['cocoannotator']}, 'messageq': {'image': 'rabbitmq:3', 'container_name': 'annotator_message_q', 'environment': ['RABBITMQ_DEFAULT_USER=user', 'RABBITMQ_DEFAULT_PASS=password'], 'ports': ['5672:5672'], 'networks': ['cocoannotator']}, 'database': {'image': 'mongo:4.0', 'container_name': 'annotator_mongodb', 'restart': 'always', 'environment': ['MONGO_DATA_DIR=/data/db', 'MONGO_LOG_DIR=/dev/null'], 'volumes': ['mongodb_data:/data/db'], 'ports': ['27017:27017'], 'command': 'mongod --smallfiles --logpath=/dev/null', 'networks': ['cocoannotator']}}}"
jsbroks/coco-annotator,latest,/docker-compose.yml,"{'version': '3', 'volumes': {'mongodb_data': {'external': False}}, 'networks': {'cocoannotator': {'external': False}}, 'services': {'webserver': {'image': 'jsbroks/coco-annotator:webserver-stable', 'container_name': 'annotator_webclient', 'restart': 'always', 'ports': ['5000:5000'], 'environment': ['SECRET_KEY=RandomSecretKeyHere', 'FILE_WATCHER=true'], 'volumes': ['./datasets:/datasets', './models:/models'], 'depends_on': ['database', 'workers'], 'networks': ['cocoannotator']}, 'workers': {'container_name': 'annotator_workers', 'image': 'jsbroks/coco-annotator:workers-stable', 'volumes': ['./datasets:/datasets'], 'depends_on': ['messageq', 'database'], 'networks': ['cocoannotator']}, 'messageq': {'image': 'rabbitmq:3', 'container_name': 'annotator_message_q', 'environment': ['RABBITMQ_DEFAULT_USER=user', 'RABBITMQ_DEFAULT_PASS=password'], 'networks': ['cocoannotator']}, 'database': {'image': 'mongo:4.0', 'container_name': 'annotator_mongodb', 'restart': 'always', 'environment': ['MONGO_DATA_DIR=/data/db', 'MONGO_LOG_DIR=/dev/null'], 'volumes': ['mongodb_data:/data/db'], 'command': 'mongod --smallfiles --logpath=/dev/null', 'networks': ['cocoannotator']}}}"
stellargraph/stellargraph,latest,/docker-compose.yml,"{'version': '3.4', 'services': {'stellargraph': {'build': {'dockerfile': 'docker/stellargraph/Dockerfile', 'context': '.'}}}}"
stellargraph/stellargraph,latest,/scripts/ci/actions-docker-compose.yml,"{'version': '3.4', 'services': {'neo4j': {'build': {'context': 'docker/stellargraph-neo4j', 'args': ['NEO4J_VERSION']}, 'ports': ['7687:7687'], 'environment': {'NEO4J_AUTH': 'none'}}}}"
stellargraph/stellargraph,latest,/.buildkite/docker-compose.yml,"{'version': '3.4', 'services': {'runner-3_6': {'build': {'context': '.', 'dockerfile': 'docker/stellargraph-ci-runner/Dockerfile', 'args': {'PYTHON_VERSION': '3.6', 'PRERELEASE_VERSIONS': '${PRERELEASE_VERSIONS:-0}'}}, 'working_dir': '/workdir', 'volumes': ['$PWD:/workdir', '${BUILDKITE_AGENT_BINARY_PATH:-/usr/bin/buildkite-agent}:/usr/bin/buildkite-agent', '/usr/local/cuda-10.1/:/usr/local/cuda10.1/', '/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/', '/usr/lib64/libcublas.so.10:/usr/lib64/libcublas.so.10', '/usr/lib64/libcublasLt.so.10:/usr/lib64/libcublasLt.so.10'], 'environment': ['PYTHONDONTWRITEBYTECODE=1', 'PYTHONWARNINGS=error:Constructing a StellarGraph:DeprecationWarning', 'GIT_BRANCH=$BUILDKITE_BRANCH', 'BUILDKITE_AGENT_ACCESS_TOKEN', 'BUILDKITE_BUILD_NUMBER', 'BUILDKITE_BRANCH', 'AWS_LOGS_BUCKET', 'BUILDKITE_PARALLEL_JOB_COUNT', 'BUILDKITE_PARALLEL_JOB', 'BUILDKITE_ORGANIZATION_SLUG', 'BUILDKITE_PIPELINE_SLUG', 'CI', 'BUILDKITE', 'BUILDKITE_PULL_REQUEST', 'BUILDKITE_JOB_ID', 'BUILDKITE_BUILD_URL', 'BUILDKITE_PROJECT_SLUG', 'BUILDKITE_COMMIT', 'BUILDKITE_TAG', 'CODECOV_TOKEN', 'NEO4J_VERSION', 'STELLARGRAPH_MUST_USE_GPU', 'NVIDIA_VISIBLE_DEVICES=all', 'NVIDIA_DRIVER_CAPABILITIES=all', 'LD_LIBRARY_PATH=/usr/local/cuda10.1/lib64/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/usr/lib64/libcublas.so.10:/usr/lib64/libcublasLt.so.10'], 'depends_on': ['${RUNNER_DEPENDS_ON:-empty-service}']}, 'runner-3_7': {'build': {'context': '.', 'dockerfile': 'docker/stellargraph-ci-runner/Dockerfile', 'args': {'PYTHON_VERSION': '3.7', 'PRERELEASE_VERSIONS': '${PRERELEASE_VERSIONS:-0}'}}, 'working_dir': '/workdir', 'volumes': ['$PWD:/workdir', '${BUILDKITE_AGENT_BINARY_PATH:-/usr/bin/buildkite-agent}:/usr/bin/buildkite-agent', '/usr/local/cuda-10.1/:/usr/local/cuda10.1/', '/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/', '/usr/lib64/libcublas.so.10:/usr/lib64/libcublas.so.10', '/usr/lib64/libcublasLt.so.10:/usr/lib64/libcublasLt.so.10'], 'environment': ['PYTHONDONTWRITEBYTECODE=1', 'PYTHONWARNINGS=error:Constructing a StellarGraph:DeprecationWarning', 'GIT_BRANCH=$BUILDKITE_BRANCH', 'BUILDKITE_AGENT_ACCESS_TOKEN', 'BUILDKITE_BUILD_NUMBER', 'BUILDKITE_BRANCH', 'AWS_LOGS_BUCKET', 'BUILDKITE_PARALLEL_JOB_COUNT', 'BUILDKITE_PARALLEL_JOB', 'BUILDKITE_ORGANIZATION_SLUG', 'BUILDKITE_PIPELINE_SLUG', 'CI', 'BUILDKITE', 'BUILDKITE_PULL_REQUEST', 'BUILDKITE_JOB_ID', 'BUILDKITE_BUILD_URL', 'BUILDKITE_PROJECT_SLUG', 'BUILDKITE_COMMIT', 'BUILDKITE_TAG', 'CODECOV_TOKEN', 'NEO4J_VERSION', 'STELLARGRAPH_MUST_USE_GPU', 'NVIDIA_VISIBLE_DEVICES=all', 'NVIDIA_DRIVER_CAPABILITIES=all', 'LD_LIBRARY_PATH=/usr/local/cuda10.1/lib64/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/usr/lib64/libcublas.so.10:/usr/lib64/libcublasLt.so.10'], 'depends_on': ['${RUNNER_DEPENDS_ON:-empty-service}']}, 'runner-3_8': {'build': {'context': '.', 'dockerfile': 'docker/stellargraph-ci-runner/Dockerfile', 'args': {'PYTHON_VERSION': '3.8', 'PRERELEASE_VERSIONS': '${PRERELEASE_VERSIONS:-0}'}}, 'working_dir': '/workdir', 'volumes': ['$PWD:/workdir', '${BUILDKITE_AGENT_BINARY_PATH:-/usr/bin/buildkite-agent}:/usr/bin/buildkite-agent', '/usr/local/cuda-10.1/:/usr/local/cuda10.1/', '/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/', '/usr/lib64/libcublas.so.10:/usr/lib64/libcublas.so.10', '/usr/lib64/libcublasLt.so.10:/usr/lib64/libcublasLt.so.10'], 'environment': ['PYTHONDONTWRITEBYTECODE=1', 'PYTHONWARNINGS=error:Constructing a StellarGraph:DeprecationWarning', 'GIT_BRANCH=$BUILDKITE_BRANCH', 'BUILDKITE_AGENT_ACCESS_TOKEN', 'BUILDKITE_BUILD_NUMBER', 'BUILDKITE_BRANCH', 'AWS_LOGS_BUCKET', 'BUILDKITE_PARALLEL_JOB_COUNT', 'BUILDKITE_PARALLEL_JOB', 'BUILDKITE_ORGANIZATION_SLUG', 'BUILDKITE_PIPELINE_SLUG', 'CI', 'BUILDKITE', 'BUILDKITE_PULL_REQUEST', 'BUILDKITE_JOB_ID', 'BUILDKITE_BUILD_URL', 'BUILDKITE_PROJECT_SLUG', 'BUILDKITE_COMMIT', 'BUILDKITE_TAG', 'CODECOV_TOKEN', 'NEO4J_VERSION', 'STELLARGRAPH_MUST_USE_GPU', 'NVIDIA_VISIBLE_DEVICES=all', 'NVIDIA_DRIVER_CAPABILITIES=all', 'LD_LIBRARY_PATH=/usr/local/cuda10.1/lib64/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/usr/lib64/libcublas.so.10:/usr/lib64/libcublasLt.so.10'], 'depends_on': ['${RUNNER_DEPENDS_ON:-empty-service}']}, 'empty-service': {'image': 'alpine:3.10'}, 'neo4j': {'build': {'context': 'docker/stellargraph-neo4j', 'args': ['NEO4J_VERSION']}, 'environment': {'NEO4J_AUTH': 'none'}}, 'conda': {'image': 'continuumio/anaconda3', 'working_dir': '/workdir', 'volumes': ['$PWD:/workdir', '${BUILDKITE_AGENT_BINARY_PATH:-/usr/bin/buildkite-agent}:/usr/bin/buildkite-agent', '/usr/local/cuda-10.1/:/usr/local/cuda10.1/', '/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/', '/usr/lib64/libcublas.so.10:/usr/lib64/libcublas.so.10', '/usr/lib64/libcublasLt.so.10:/usr/lib64/libcublasLt.so.10'], 'environment': ['PYTHONDONTWRITEBYTECODE=1', 'PYTHONWARNINGS=error:Constructing a StellarGraph:DeprecationWarning', 'GIT_BRANCH=$BUILDKITE_BRANCH', 'BUILDKITE_AGENT_ACCESS_TOKEN', 'BUILDKITE_BUILD_NUMBER', 'BUILDKITE_BRANCH', 'AWS_LOGS_BUCKET', 'BUILDKITE_PARALLEL_JOB_COUNT', 'BUILDKITE_PARALLEL_JOB', 'BUILDKITE_ORGANIZATION_SLUG', 'BUILDKITE_PIPELINE_SLUG', 'CI', 'BUILDKITE', 'BUILDKITE_PULL_REQUEST', 'BUILDKITE_JOB_ID', 'BUILDKITE_BUILD_URL', 'BUILDKITE_PROJECT_SLUG', 'BUILDKITE_COMMIT', 'BUILDKITE_TAG', 'CODECOV_TOKEN', 'NEO4J_VERSION', 'STELLARGRAPH_MUST_USE_GPU', 'NVIDIA_VISIBLE_DEVICES=all', 'NVIDIA_DRIVER_CAPABILITIES=all', 'LD_LIBRARY_PATH=/usr/local/cuda10.1/lib64/:/var/lib/buildkite-agent/TensorRT-6.0.1.5/targets/x86_64-linux-gnu/lib/:/usr/lib64/libcublas.so.10:/usr/lib64/libcublasLt.so.10']}}}"
blakeblackshear/frigate,latest,/docker-compose.yml,"{'version': '3', 'services': {'dev': {'container_name': 'frigate-dev', 'user': 'vscode', 'privileged': True, 'shm_size': '256mb', 'build': {'context': '.', 'dockerfile': 'docker/Dockerfile.dev'}, 'volumes': ['/etc/localtime:/etc/localtime:ro', '.:/lab/frigate:cached', './config/config.yml:/config/config.yml:ro', './debug:/media/frigate', '/dev/bus/usb:/dev/bus/usb', '/dev/dri:/dev/dri'], 'ports': ['1935:1935', '5000:5000', '5001:5001', '8080:8080'], 'entrypoint': ['sudo', '/init'], 'command': '/bin/sh -c ""while sleep 1000; do :; done""'}, 'mqtt': {'container_name': 'mqtt', 'image': 'eclipse-mosquitto:1.6', 'ports': ['1883:1883']}}}"
Drakkar-Software/OctoBot,latest,/docker-compose.yml,"{'version': '3', 'services': {'octobot': {'image': 'drakkarsoftware/octobot:stable', 'environment': ['VIRTUAL_HOST=${HOST}', 'VIRTUAL_PORT=5001', 'SELF_SIGNED_HOST=${HOST}'], 'volumes': ['./logs:/octobot/logs', './backtesting:/octobot/backtesting', './tentacles:/octobot/tentacles', './user:/octobot/user'], 'expose': [5001], 'restart': 'always'}, 'nginx': {'image': 'jwilder/nginx-proxy:alpine', 'ports': ['80:80', '443:443'], 'volumes': ['/var/run/docker.sock:/tmp/docker.sock:ro', './ssl:/etc/nginx/certs', './vhost.d:/etc/nginx/vhost.d'], 'restart': 'always', 'privileged': True, 'depends_on': ['octobot']}, 'nginx-companion': {'container_name': 'proxy-companion', 'restart': 'always', 'image': 'sebastienheyd/self-signed-proxy-companion:latest', 'volumes': ['/var/run/docker.sock:/var/run/docker.sock:ro', './ssl:/etc/nginx/certs']}}}"
olivia-ai/olivia,latest,/docker-compose.yml,"{'version': '3', 'services': {'olivia-ai.org': {'image': 'docker.pkg.github.com/olivia-ai/olivia-ai.org/olivia-ai.org:latest', 'build': {'context': '.', 'args': ['VUE_APP_URL=ws://localhost:8080']}, 'environment': ['PORT=80'], 'ports': ['80:80']}, 'olivia': {'image': 'docker.pkg.github.com/olivia-ai/olivia/olivia:latest', 'environment': ['PORT=8080'], 'ports': ['8080:8080']}}}"
ml-tooling/ml-workspace,latest,/deployment/play-with-docker/docker-compose.yml,"{'version': '3.2', 'services': {'ml-workspace': {'image': 'mltooling/ml-workspace-minimal', 'restart': 'always', 'volumes': ['ml-workspace:/workspace'], 'ports': ['8080:8080']}}, 'volumes': {'ml-workspace': None}}"
opendatacam/opendatacam,latest,/docker/run/xavier/docker-compose.yml,"{'version': '2.3', 'services': {'opendatacam': {'restart': 'always', 'image': 'opendatacam/opendatacam:v3.0.2-xavier', 'privileged': True, 'volumes': ['./config.json:/var/local/opendatacam/config.json'], 'ports': ['8080:8080', '8070:8070', '8090:8090']}, 'mongo': {'image': 'mongo', 'restart': 'always', 'ports': ['27017:27017'], 'volumes': ['mongodb_data_container:/data/db']}}, 'volumes': {'mongodb_data_container': None}}"
opendatacam/opendatacam,latest,/docker/run/nano/docker-compose.yml,"{'version': '2.3', 'services': {'opendatacam': {'restart': 'always', 'image': 'opendatacam/opendatacam:v3.0.2-nano', 'privileged': True, 'volumes': ['./config.json:/var/local/opendatacam/config.json'], 'ports': ['8080:8080', '8070:8070', '8090:8090']}, 'mongo': {'image': 'mongo:4.4.8', 'restart': 'always', 'ports': ['27017:27017'], 'volumes': ['mongodb_data_container:/data/db']}}, 'volumes': {'mongodb_data_container': None}}"
opendatacam/opendatacam,latest,/docker/run/desktop/docker-compose.yml,"{'version': '2.3', 'services': {'opendatacam': {'restart': 'always', 'runtime': 'nvidia', 'image': 'opendatacam/opendatacam:v3.0.2-desktop', 'privileged': True, 'volumes': ['./config.json:/var/local/opendatacam/config.json'], 'ports': ['8080:8080', '8070:8070', '8090:8090']}, 'mongo': {'image': 'mongo', 'restart': 'always', 'ports': ['27017:27017'], 'volumes': ['mongodb_data_container:/data/db']}}, 'volumes': {'mongodb_data_container': None}}"
VertaAI/modeldb,latest,/docker-compose-all.yaml,"{'version': '3.5', 'services': {'modeldb-backend': {'image': 'vertaaiofficial/modeldb-backend:2.0.8.1', 'container_name': 'modeldb-backend', 'expose': ['8085', '8086'], 'ports': ['8085:8085', '8086:8086'], 'networks': ['modeldb_network'], 'environment': ['VERTA_MODELDB_CONFIG:/config/config.yaml', 'LIQUIBASE_MIGRATION:true'], 'volumes': ['./backend/config:/config/', './data/artifact-store:/artifact-store/']}, 'modeldb-proxy': {'image': 'vertaaiofficial/modeldb-proxy:2.0.8.1', 'container_name': 'modeldb-proxy', 'environment': {'MDB_ADDRESS': 'modeldb-backend:8085', 'SERVER_HTTP_PORT': '8080'}, 'expose': ['8080'], 'ports': ['8080:8080'], 'depends_on': ['modeldb-backend'], 'networks': ['modeldb_network']}, 'modeldb-graphql': {'image': 'vertaaiofficial/modeldb-graphql:2.0.8.1', 'container_name': 'modeldb-graphql', 'environment': {'MDB_ADDRESS': 'modeldb-backend:8085', 'SERVER_HTTP_PORT': '4000', 'QUERY_PATH': '/api/v1/graphql/query'}, 'expose': ['4000'], 'ports': ['4000:4000'], 'depends_on': ['modeldb-backend'], 'networks': ['modeldb_network']}, 'modeldb-frontend': {'image': 'vertaaiofficial/modeldb-frontend:2.0.8.2', 'container_name': 'modeldb-frontend', 'expose': ['3000'], 'ports': ['3000:3000'], 'depends_on': ['modeldb-proxy', 'modeldb-graphql'], 'environment': {'DEPLOYED': 'yes', 'BACKEND_API_PROTOCOL': 'http', 'BACKEND_API_DOMAIN': 'modeldb-webapp:3000', 'MDB_ADDRESS': 'http://modeldb-proxy:8080', 'ARTIFACTORY_ADDRESS': 'http://modeldb-backend:8086', 'GQL_ADDRESS': 'http://modeldb-graphql:4000'}, 'networks': ['modeldb_network']}, 'modeldb-postgres': {'image': 'postgres', 'container_name': 'modeldb-postgres', 'restart': 'always', 'environment': {'POSTGRES_PASSWORD': 'root', 'PGDATA': '/var/lib/postgresql/data/pgdata'}, 'networks': ['modeldb_network'], 'volumes': ['./data/pgdata:/var/lib/postgresql/data/pgdata']}}, 'networks': {'modeldb_network': None}}"
VertaAI/modeldb,latest,/backend/docker-compose.yaml,"{'version': '3.5', 'services': {'modeldb-backend': {'image': 'modeldb-backend:latest', 'container_name': 'modeldb-backend', 'build': '.', 'volumes': ['/Users/XYZ/Document/config:/config'], 'environment': {'VERTA_MODELDB_CONFIG': '/config/config.yaml'}, 'expose': ['8085'], 'ports': ['8085:8085'], 'networks': ['modeldb_network']}, 'backend-proxy': {'image': 'backend-proxy:latest', 'container_name': 'backend-proxy', 'expose': ['8080'], 'ports': ['8080:8080'], 'depends_on': ['modeldb-backend'], 'networks': ['modeldb_network']}, 'uacservice': {'image': 'uacservice:latest', 'container_name': 'uacservice', 'expose': ['50051'], 'ports': ['50051:50051'], 'networks': ['modeldb_network'], 'environment': ['CONFIG_DIR:/config'], 'volumes': ['/path/to/UACService:/config']}}, 'networks': {'modeldb_network': {'external': {'name': 'modeldb_network'}}}, 'volumes': {'mongodata': None}}"
vearch/vearch,latest,/cloud/docker-compose.yml,"{'version': '3.5', 'services': {'standalone': {'container_name': 'vearch-standalone', 'image': 'vearch/vearch:3.2.7', 'ports': ['8817:8817', '9001:9001'], 'volumes': ['${DOCKER_VOLUME_DIRECTORY:-.}/config.toml:/vearch/config.toml'], 'command': 'all'}}}"
jonaswinkler/paperless-ng,latest,/docker/compose/docker-compose.sqlite.yml,"{'version': '3.4', 'services': {'broker': {'image': 'redis:6.0', 'restart': 'unless-stopped'}, 'webserver': {'image': 'jonaswinkler/paperless-ng:latest', 'restart': 'unless-stopped', 'depends_on': ['broker'], 'ports': ['8000:8000'], 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:8000'], 'interval': '30s', 'timeout': '10s', 'retries': 5}, 'volumes': ['data:/usr/src/paperless/data', 'media:/usr/src/paperless/media', './export:/usr/src/paperless/export', './consume:/usr/src/paperless/consume'], 'env_file': 'docker-compose.env', 'environment': {'PAPERLESS_REDIS': 'redis://broker:6379'}}}, 'volumes': {'data': None, 'media': None}}"
jonaswinkler/paperless-ng,latest,/docker/compose/docker-compose.postgres-tika.yml,"{'version': '3.4', 'services': {'broker': {'image': 'redis:6.0', 'restart': 'unless-stopped'}, 'db': {'image': 'postgres:13', 'restart': 'unless-stopped', 'volumes': ['pgdata:/var/lib/postgresql/data'], 'environment': {'POSTGRES_DB': 'paperless', 'POSTGRES_USER': 'paperless', 'POSTGRES_PASSWORD': 'paperless'}}, 'webserver': {'image': 'jonaswinkler/paperless-ng:latest', 'restart': 'unless-stopped', 'depends_on': ['db', 'broker', 'gotenberg', 'tika'], 'ports': ['8000:8000'], 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:8000'], 'interval': '30s', 'timeout': '10s', 'retries': 5}, 'volumes': ['data:/usr/src/paperless/data', 'media:/usr/src/paperless/media', './export:/usr/src/paperless/export', './consume:/usr/src/paperless/consume'], 'env_file': 'docker-compose.env', 'environment': {'PAPERLESS_REDIS': 'redis://broker:6379', 'PAPERLESS_DBHOST': 'db', 'PAPERLESS_TIKA_ENABLED': 1, 'PAPERLESS_TIKA_GOTENBERG_ENDPOINT': 'http://gotenberg:3000', 'PAPERLESS_TIKA_ENDPOINT': 'http://tika:9998'}}, 'gotenberg': {'image': 'thecodingmachine/gotenberg', 'restart': 'unless-stopped', 'environment': {'DISABLE_GOOGLE_CHROME': 1}}, 'tika': {'image': 'apache/tika', 'restart': 'unless-stopped'}}, 'volumes': {'data': None, 'media': None, 'pgdata': None}}"
jonaswinkler/paperless-ng,latest,/docker/compose/docker-compose.postgres.yml,"{'version': '3.4', 'services': {'broker': {'image': 'redis:6.0', 'restart': 'unless-stopped'}, 'db': {'image': 'postgres:13', 'restart': 'unless-stopped', 'volumes': ['pgdata:/var/lib/postgresql/data'], 'environment': {'POSTGRES_DB': 'paperless', 'POSTGRES_USER': 'paperless', 'POSTGRES_PASSWORD': 'paperless'}}, 'webserver': {'image': 'jonaswinkler/paperless-ng:latest', 'restart': 'unless-stopped', 'depends_on': ['db', 'broker'], 'ports': ['8000:8000'], 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:8000'], 'interval': '30s', 'timeout': '10s', 'retries': 5}, 'volumes': ['data:/usr/src/paperless/data', 'media:/usr/src/paperless/media', './export:/usr/src/paperless/export', './consume:/usr/src/paperless/consume'], 'env_file': 'docker-compose.env', 'environment': {'PAPERLESS_REDIS': 'redis://broker:6379', 'PAPERLESS_DBHOST': 'db'}}}, 'volumes': {'data': None, 'media': None, 'pgdata': None}}"
jonaswinkler/paperless-ng,latest,/docker/compose/docker-compose.sqlite-tika.yml,"{'version': '3.4', 'services': {'broker': {'image': 'redis:6.0', 'restart': 'unless-stopped'}, 'webserver': {'image': 'jonaswinkler/paperless-ng:latest', 'restart': 'unless-stopped', 'depends_on': ['broker', 'gotenberg', 'tika'], 'ports': ['8000:8000'], 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:8000'], 'interval': '30s', 'timeout': '10s', 'retries': 5}, 'volumes': ['data:/usr/src/paperless/data', 'media:/usr/src/paperless/media', './export:/usr/src/paperless/export', './consume:/usr/src/paperless/consume'], 'env_file': 'docker-compose.env', 'environment': {'PAPERLESS_REDIS': 'redis://broker:6379', 'PAPERLESS_TIKA_ENABLED': 1, 'PAPERLESS_TIKA_GOTENBERG_ENDPOINT': 'http://gotenberg:3000', 'PAPERLESS_TIKA_ENDPOINT': 'http://tika:9998'}}, 'gotenberg': {'image': 'thecodingmachine/gotenberg', 'restart': 'unless-stopped', 'environment': {'DISABLE_GOOGLE_CHROME': 1}}, 'tika': {'image': 'apache/tika', 'restart': 'unless-stopped'}}, 'volumes': {'data': None, 'media': None}}"
jonaswinkler/paperless-ng,latest,/docker/compose/docker-compose.portainer.yml,"{'version': '3.4', 'services': {'broker': {'image': 'redis:6.0', 'restart': 'unless-stopped'}, 'db': {'image': 'postgres:13', 'restart': 'unless-stopped', 'volumes': ['pgdata:/var/lib/postgresql/data'], 'environment': {'POSTGRES_DB': 'paperless', 'POSTGRES_USER': 'paperless', 'POSTGRES_PASSWORD': 'paperless'}}, 'webserver': {'image': 'jonaswinkler/paperless-ng:latest', 'restart': 'unless-stopped', 'depends_on': ['db', 'broker'], 'ports': ['8010:8000'], 'healthcheck': {'test': ['CMD', 'curl', '-f', 'http://localhost:8000'], 'interval': '30s', 'timeout': '10s', 'retries': 5}, 'volumes': ['data:/usr/src/paperless/data', 'media:/usr/src/paperless/media', './export:/usr/src/paperless/export', './consume:/usr/src/paperless/consume'], 'environment': {'PAPERLESS_REDIS': 'redis://broker:6379', 'PAPERLESS_DBHOST': 'db', 'USERMAP_UID': 1000, 'USERMAP_GID': 100}}}, 'volumes': {'data': None, 'media': None, 'pgdata': None}}"
determined-ai/determined,latest,/harness/determined/deploy/local/docker-compose.yaml,"{'version': '3.7', 'services': {'determined-db': {'image': 'postgres:10.14', 'volumes': ['determined-db-volume:/var/lib/postgresql/data'], 'restart': 'unless-stopped', 'environment': {'POSTGRES_DB': 'determined', 'POSTGRES_PASSWORD': '${DET_DB_PASSWORD}'}, 'command': ['--max_connections=96', '--shared_buffers=512MB']}, 'determined-master': {'init': True, 'restart': '${DET_RESTART_POLICY:-unless-stopped}', 'depends_on': ['determined-db'], 'image': '${IMAGE_REPO_PREFIX:-determinedai}/determined-master:${DET_VERSION}', 'volumes': ['${DET_MASTER_CONFIG}:/etc/determined/master.yaml'], 'ports': ['${INTEGRATIONS_HOST_PORT:-8080}:8080'], 'environment': {'DET_LOG_LEVEL': '${INTEGRATIONS_LOG_LEVEL:-info}', 'DET_MASTER_HTTP_PORT': '${INTEGRATIONS_HOST_PORT:-8080}', 'DET_DB_PASSWORD': '${DET_DB_PASSWORD}'}}}, 'volumes': {'determined-db-volume': {}}}"
prabhuomkar/pytorch-cpp,latest,/docker-compose.yml,"{'version': '3', 'services': {'pytorch-cpp': {'build': '.', 'volumes': ['.:/pytorch-cpp'], 'image': 'pytorch-cpp', 'container_name': 'pytorch-cpp'}}}"
timeseriesAI/tsai,latest,/docker-compose.yml,"{'version': '3', 'services': {'fastai': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/']}, 'notebook': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'command': 'bash -c ""pip install -e . && jupyter notebook --allow-root --no-browser --ip=0.0.0.0 --port=8080 --NotebookApp.token=\'\' --NotebookApp.password=\'\'""', 'ports': ['8080:8080']}, 'watcher': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'command': 'watchmedo shell-command --command nbdev_build_docs --pattern *.ipynb --recursive --drop', 'network_mode': 'host'}, 'jekyll': {'restart': 'unless-stopped', 'working_dir': '/data', 'image': 'fastai/codespaces', 'logging': {'driver': 'json-file', 'options': {'max-size': '50m'}}, 'stdin_open': True, 'tty': True, 'volumes': ['.:/data/'], 'ports': ['4000:4000'], 'command': 'bash -c ""cp -r docs_src docs && pip install . && nbdev_build_docs && cd docs && bundle i && chmod -R u+rwx . && bundle exec jekyll serve --host 0.0.0.0""\n'}}}"
TensorSpeech/TensorFlowASR,latest,/docker-compose.yml,"{'version': '3.9', 'services': {'tensorflow_asr': {'build': {'context': '.', 'args': {'using_gpu': 'true', 'install_rnnt_loss': 'true'}}, 'tty': True, 'runtime': 'nvidia', 'environment': ['NVIDIA_VISIBLE_DEVICES=all', 'NVIDIA_DRIVER_CAPABILITIES=all'], 'ipc': 'host', 'ports': ['6006:6006'], 'working_dir': '/app', 'volumes': ['./:/app']}}}"
BlazingDB/blazingsql,latest,/tests/KrbHDFS/docker-compose.yml,"{'version': '2', 'networks': {'custom': {'driver': 'bridge', 'ipam': {'driver': 'default', 'config': [{'subnet': '172.22.0.0/16', 'gateway': '172.22.0.1'}]}}}, 'services': {'kdc': {'networks': {'custom': {'ipv4_address': '172.22.0.2'}}, 'image': 'rommelbz/krb-testing', 'hostname': 'kdc.kerberos.com', 'environment': {'REALM': '${HOSTNAME}', 'DOMAIN_REALM': 'kdc.kerberos.com'}, 'volumes': ['/dev/urandom:/dev/random:ro', '/etc/localtime:/etc/localtime:ro']}, 'hadoop-secure': {'networks': {'custom': {'ipv4_address': '172.22.0.3'}}, 'image': 'rommelbz/hdfs-testing', 'depends_on': ['kdc'], 'hostname': 'hadoop', 'domainname': 'docker.com', 'tty': True, 'extra_hosts': ['kdc.kerberos.com kdc:172.22.0.2'], 'environment': {'KRB_REALM': '${HOSTNAME}', 'DOMAIN_REALM': 'kdc.kerberos.com', 'FQDN': 'hadoop.docker.com'}, 'volumes': ['/etc/localtime:/etc/localtime:ro', './myconf:/conf_dir']}}}"
exadel-inc/CompreFace,latest,/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'restart': 'always', 'image': 'postgres:11.5', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'restart': 'always', 'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'restart': 'always', 'image': '${registry}compreface-api:${API_VERSION}', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'restart': 'always', 'image': '${registry}compreface-fe:${FE_VERSION}', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'restart': 'always', 'image': '${registry}compreface-core:${CORE_VERSION}', 'container_name': 'compreface-core', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/custom-builds/Mobilenet/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/custom-builds/Mobilenet-gpu/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'runtime': 'nvidia', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/custom-builds/FaceNet/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/custom-builds/SubCenter-ArcFace-r100-gpu/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'runtime': 'nvidia', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/custom-builds/SubCenter-ArcFace-r100/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'container_name': 'compreface-admin', 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'container_name': 'compreface-api', 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/dev/docker-compose.dev.ui.yml,"{'version': '3.4', 'services': {'compreface-fe': {'build': {'context': '../ui', 'dockerfile': 'docker-dev/Dockerfile'}}}}"
exadel-inc/CompreFace,latest,/dev/docker-compose-gpu.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'container_name': 'compreface-postgres-db', 'ports': ['6432:5432'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'build': {'context': '../java', 'dockerfile': '../dev/Dockerfile', 'target': 'frs_crud'}, 'container_name': 'compreface-admin', 'ports': ['8081:8080', '5006:5005'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'build': {'context': '../java', 'dockerfile': '../dev/Dockerfile', 'target': 'frs_core', 'args': ['ND4J_CLASSIFIER=${ND4J_CLASSIFIER}']}, 'container_name': 'compreface-api', 'ports': ['8082:8080', '5005:5005'], 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'build': {'context': '../ui', 'dockerfile': 'docker-prod/Dockerfile'}, 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'container_name': 'compreface-core', 'ports': ['3300:3000'], 'runtime': 'nvidia', 'build': {'context': '../embedding-calculator', 'args': ['FACE_DETECTION_PLUGIN=insightface.FaceDetector@retinaface_r50_v1', 'CALCULATION_PLUGIN=insightface.Calculator@arcface_r100_v1', 'EXTRA_PLUGINS=insightface.LandmarksDetector,insightface.GenderDetector,insightface.AgeDetector', 'BASE_IMAGE=compreface-core-base:base-cuda100-py37', 'GPU_IDX=0']}, 'environment': ['ML_PORT=3000']}}}"
exadel-inc/CompreFace,latest,/dev/docker-compose.yml,"{'version': '3.4', 'volumes': {'postgres-data': None}, 'services': {'compreface-postgres-db': {'image': 'postgres:11.5', 'restart': 'always', 'container_name': 'compreface-postgres-db', 'ports': ['6432:5432'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_DB=${postgres_db}'], 'volumes': ['postgres-data:/var/lib/postgresql/data']}, 'compreface-admin': {'image': '${registry}compreface-admin:${ADMIN_VERSION}', 'restart': 'always', 'build': {'context': '../java', 'dockerfile': '../dev/Dockerfile', 'target': 'frs_crud'}, 'container_name': 'compreface-admin', 'ports': ['8081:8080', '5006:5005'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'ENABLE_EMAIL_SERVER=${enable_email_server}', 'EMAIL_HOST=${email_host}', 'EMAIL_USERNAME=${email_username}', 'EMAIL_FROM=${email_from}', 'EMAIL_PASSWORD=${email_password}', 'ADMIN_JAVA_OPTS=${compreface_admin_java_options}'], 'depends_on': ['compreface-postgres-db', 'compreface-api']}, 'compreface-api': {'image': '${registry}compreface-api:${API_VERSION}', 'restart': 'always', 'build': {'context': '../java', 'dockerfile': '../dev/Dockerfile', 'target': 'frs_core', 'args': ['ND4J_CLASSIFIER=${ND4J_CLASSIFIER}']}, 'container_name': 'compreface-api', 'ports': ['8082:8080', '5005:5005'], 'depends_on': ['compreface-postgres-db'], 'environment': ['POSTGRES_USER=${postgres_username}', 'POSTGRES_PASSWORD=${postgres_password}', 'POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}', 'SPRING_PROFILES_ACTIVE=dev', 'API_JAVA_OPTS=${compreface_api_java_options}', 'SAVE_IMAGES_TO_DB=${save_images_to_db}']}, 'compreface-fe': {'image': '${registry}compreface-fe:${FE_VERSION}', 'restart': 'always', 'build': {'context': '../ui', 'dockerfile': 'docker-prod/Dockerfile'}, 'container_name': 'compreface-ui', 'ports': ['8000:80'], 'depends_on': ['compreface-api', 'compreface-admin']}, 'compreface-core': {'image': '${registry}compreface-core:${CORE_VERSION}', 'restart': 'always', 'container_name': 'compreface-core', 'ports': ['3300:3000'], 'build': {'context': '../embedding-calculator'}, 'environment': ['ML_PORT=3000']}}}"
reiinakano/xcessiv,latest,/docker/docker-compose.yml,"{'version': '2', 'services': {'redis': {'image': 'redis:alpine'}, 'xcessiv': {'image': 'reiinakano/xcessiv', 'command': 'bash -c ""xcessiv -H redis -P 6379""', 'depends_on': ['redis'], 'ports': ['1994:1994'], 'volumes': ['./data:/XcessivProjects']}}}"
huseinzol05/malaya,latest,/misc/deployment/gunicorn-flask/docker-compose.yaml,"{'version': '3', 'services': {'model': {'build': {'context': '.'}, 'container_name': 'model-gunicorn-flask', 'command': 'bash worker.sh 5', 'ports': ['8080:8080']}}}"
huseinzol05/malaya,latest,/misc/deployment/uwsgi-flask-cheaper/docker-compose.yaml,"{'version': '3', 'services': {'model': {'build': {'context': '.'}, 'container_name': 'model-uwsgi-flask', 'command': 'bash worker.sh', 'ports': ['8080:8080'], 'sysctls': {'net.core.somaxconn': 1024}}}}"
huseinzol05/malaya,latest,/misc/deployment/fast-api/docker-compose.yaml,"{'version': '3', 'services': {'model': {'build': {'context': '.'}, 'container_name': 'model', 'command': 'bash /app/start.sh', 'ports': ['8080:80']}}}"
huseinzol05/malaya,latest,/misc/deployment/uwsgi-flask-fork/docker-compose.yaml,"{'version': '3', 'services': {'model': {'build': {'context': '.'}, 'container_name': 'model-uwsgi-flask-fork', 'command': 'bash worker.sh', 'ports': ['8080:8080'], 'sysctls': {'net.core.somaxconn': 1024}}}}"
semi-technologies/weaviate,latest,/docker-compose-test.yml,"{'version': '3.4', 'services': {'weaviate': {'image': 'weaviate/test-server', 'build': {'context': '.', 'dockerfile': 'Dockerfile', 'target': 'weaviate'}, 'restart': 'on-failure:0', 'ports': ['8080:8080'], 'environment': {'LOG_LEVEL': 'debug', 'CONTEXTIONARY_URL': 'contextionary:9999', 'QUERY_DEFAULTS_LIMIT': 20, 'AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED': 'true', 'PERSISTENCE_DATA_PATH': './data', 'DEFAULT_VECTORIZER_MODULE': 'text2vec-contextionary', 'ENABLE_MODULES': 'text2vec-contextionary'}}, 'contextionary': {'image': 'semitechnologies/contextionary:en0.16.0-v1.0.2', 'ports': ['9999:9999'], 'environment': {'OCCURRENCE_WEIGHT_LINEAR_FACTOR': 0.75, 'EXTENSIONS_STORAGE_MODE': 'weaviate', 'EXTENSIONS_STORAGE_ORIGIN': 'http://weaviate:8080'}}}}"
semi-technologies/weaviate,latest,/docker-compose.yml,"{'version': '3.4', 'services': {'contextionary': {'image': 'semitechnologies/contextionary:en0.16.0-v1.1.0', 'ports': ['9999:9999'], 'environment': {'EXTENSIONS_STORAGE_MODE': 'weaviate', 'EXTENSIONS_STORAGE_ORIGIN': 'http://host.docker.internal:8080', 'OCCURRENCE_WEIGHT_LINEAR_FACTOR': 0.75, 'LOG_LEVEL': 'debug'}}, 'keycloak': {'image': 'jboss/keycloak:5.0.0', 'environment': {'KEYCLOAK_USER': 'admin', 'KEYCLOAK_PASSWORD': 'admin', 'KEYCLOAK_IMPORT': '/tmp/weaviate-realm.json'}, 'volumes': ['./tools/dev/keycloak/weaviate-realm.json:/tmp/weaviate-realm.json'], 'ports': ['9090:8080']}, 't2v-transformers': {'image': 'semitechnologies/transformers-inference:distilbert-base-uncased-1.1.0', 'ports': ['8000:8080']}, 'qna-transformers': {'image': 'semitechnologies/qna-transformers:bert-large-uncased-whole-word-masking-finetuned-squad', 'ports': ['8001:8080']}, 'i2v-neural': {'image': 'semitechnologies/img2vec-pytorch:resnet50-07dd697', 'ports': ['8002:8080']}, 'ner-transformers': {'image': 'semitechnologies/ner-transformers:latest', 'ports': ['8003:8080']}, 'text-spellcheck': {'image': 'semitechnologies/text-spellcheck-model:pyspellchecker-d933122', 'ports': ['8004:8080']}, 'multi2vec-clip': {'image': 'semitechnologies/multi2vec-clip:sentence-transformers-clip-ViT-B-32-multilingual-v1-783f3f9', 'ports': ['8005:8080']}}}"
jeff1evesque/machine-learning,latest,/docker-compose.rancher.yml,"{'version': '2', 'services': {'mariadb': {'hostname': 'mariadb', 'image': 'jeff1evesque/ml-mariadb:0.8'}, 'mongodb': {'hostname': 'mongodb', 'image': 'jeff1evesque/ml-mongodb:0.8'}, 'redis': {'hostname': 'redis', 'image': 'jeff1evesque/ml-redis:0.8'}, 'browserify': {'hostname': 'browserify', 'image': 'jeff1evesque/ml-browserify:0.8'}, 'sass': {'hostname': 'sass', 'image': 'jeff1evesque/ml-sass:0.8'}, 'webserver-api': {'hostname': 'webserver-api', 'image': 'jeff1evesque/ml-webserver:0.8', 'command': ['api', '0.0.0.0', '6001', '6']}, 'webserver-web': {'hostname': 'webserver-web', 'image': 'jeff1evesque/ml-webserver:0.8', 'command': ['web', '0.0.0.0', '5001', '6']}, 'nginx-api': {'hostname': 'nginx-api', 'image': 'jeff1evesque/ml-nginx-api:0.8', 'ports': ['9595:6000/tcp']}, 'nginx-web': {'hostname': 'nginx-web', 'image': 'jeff1evesque/ml-nginx-web:0.8', 'ports': ['8585:5000/tcp']}}}"
jeff1evesque/machine-learning,latest,/docker-compose.yml,"{'version': '3', 'services': {'mariadb': {'hostname': 'mariadb', 'image': 'jeff1evesque/ml-mariadb:0.8', 'volumes': ['mariadb:/var/lib/mysql']}, 'mongodb': {'hostname': 'mongodb', 'image': 'jeff1evesque/ml-mongodb:0.8', 'volumes': ['mongodb:/data/db']}, 'redis': {'hostname': 'redis', 'image': 'jeff1evesque/ml-redis:0.8', 'volumes': ['redis:/data']}, 'browserify': {'hostname': 'browserify', 'image': 'jeff1evesque/ml-browserify:0.8', 'volumes': ['./src/jsx/__tests__:/var/machine-learning/src/jsx/__tests__', './src/jsx/import:/var/machine-learning/src/jsx/import', './src/jsx/.babelrc:/var/machine-learning/src/jsx/.babelrc', './src/jsx/content.jsx:/var/machine-learning/src/jsx/content.jsx', './src/jsx/jest.config.js:/var/machine-learning/src/jsx/jest.config.js', './src/jsx/package.json:/var/machine-learning/src/jsx/package.json', './src/jsx/README.md:/var/machine-learning/src/jsx/README.md', './src/jsx/setup.js:/var/machine-learning/src/jsx/setup.js', './interface/static/js:/var/machine-learning/interface/static/js']}, 'sass': {'hostname': 'sass', 'image': 'jeff1evesque/ml-sass:0.8', 'volumes': ['./src/scss:/var/machine-learning/src/scss', './interface/static/css:/var/machine-learning/interface/static/css']}, 'webserver-api': {'hostname': 'webserver-api', 'image': 'jeff1evesque/ml-webserver:0.8', 'command': ['api', '0.0.0.0', '6001', '6'], 'start_on_create': True, 'volumes': ['./log:/var/machine-learning/log', './interface/__init__.py:/var/machine-learning/interface/__init__.py', './interface/views_api.py:/var/machine-learning/interface/views_api.py', './hiera:/var/machine-learning/hiera', './brain:/var/machine-learning/brain', './test:/var/machine-learning/test', './test/backend:/var/machine-learning/test/backend', './test/live_server:/var/machine-learning/test/live_server', './app.py:/var/machine-learning/app.py', './factory.py:/var/machine-learning/factory.py', './__init__.py:/var/machine-learning/__init__.py']}, 'webserver-web': {'hostname': 'webserver-web', 'image': 'jeff1evesque/ml-webserver:0.8', 'command': ['web', '0.0.0.0', '5001', '6'], 'volumes': ['./log:/var/machine-learning/log', './interface/__init__.py:/var/machine-learning/interface/__init__.py', './interface/views_web.py:/var/machine-learning/interface/views_web.py', './interface/templates:/var/machine-learning/interface/templates', './interface/static/js:/var/machine-learning/interface/static/js', './interface/static/css:/var/machine-learning/interface/static/css', './hiera:/var/machine-learning/hiera', './brain:/var/machine-learning/brain', './test/linter:/var/machine-learning/test/linter', './test/lint:/var/machine-learning/test/lint', './app.py:/var/machine-learning/app.py', './factory.py:/var/machine-learning/factory.py']}, 'nginx-api': {'hostname': 'nginx-api', 'image': 'jeff1evesque/ml-nginx-api:0.8', 'ports': ['9595:6000/tcp']}, 'nginx-web': {'hostname': 'nginx-web', 'image': 'jeff1evesque/ml-nginx-web:0.8', 'ports': ['8585:5000/tcp']}}, 'volumes': {'mariadb': {'driver': 'local'}, 'mongodb': {'driver': 'local'}, 'redis': {'driver': 'local'}}}"
blue-oil/blueoil,latest,/docker-compose.yml,"{'version': '2.4', 'services': {'blueoil': {'build': {'context': '.', 'dockerfile': './docker/Dockerfile', 'target': 'blueoil-dev', 'shm_size': '1gb'}, 'image': 'blueoil_${USER}', 'runtime': 'nvidia', 'ulimits': {'memlock': -1, 'stack': 67108864}, 'network_mode': 'host', 'working_dir': '/home/blueoil', 'volumes': ['./:/home/blueoil', '${DATA_DIR}:/home/blueoil/dataset', '${OUTPUT_DIR:-./saved}:/home/blueoil/saved'], 'environment': ['CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}', 'DATA_DIR=/home/blueoil/dataset', 'OUTPUT_DIR=/home/blueoil/saved']}}}"
DigitalSlideArchive/HistomicsTK,latest,/tests/docker-compose.yml,"{'version': '3', 'services': {'girder': {'build': {'context': '.', 'dockerfile': 'Dockerfile-gc-tests'}, 'depends_on': ['mongodb'], 'volumes': ['../.tox/externaldata:/tests/externaldata']}, 'mongodb': {'image': 'circleci/mongo:5.0-ram', 'command': ['mongod', '--storageEngine', 'ephemeralForTest', '--dbpath', '/dev/shm/mongo']}}}"
photonixapp/photonix,latest,/docker/docker-compose.example.yml,"{'version': '3', 'services': {'postgres': {'container_name': 'photonix-postgres', 'image': 'postgres:11.1-alpine', 'environment': {'POSTGRES_DB': 'photonix', 'POSTGRES_PASSWORD': 'password'}, 'volumes': ['./data/db:/var/lib/postgresql/data']}, 'redis': {'container_name': 'photonix-redis', 'image': 'redis:6.2.2'}, 'photonix': {'container_name': 'photonix', 'image': 'photonixapp/photonix:latest', 'ports': ['8888:80'], 'environment': {'ENV': 'prd', 'POSTGRES_HOST': 'postgres', 'POSTGRES_DB': 'photonix', 'POSTGRES_USER': 'postgres', 'POSTGRES_PASSWORD': 'password', 'REDIS_HOST': 'redis', 'ALLOWED_HOSTS': '*'}, 'volumes': ['./data/photos:/data/photos', './data/raw-photos-processed:/data/raw-photos-processed', './data/cache:/data/cache', './data/models:/data/models'], 'links': ['postgres', 'redis']}}}"
photonixapp/photonix,latest,/docker/docker-compose.prd.yml,"{'version': '3', 'services': {'postgres': {'container_name': 'photonix-postgres', 'image': 'postgres:11.1-alpine', 'ports': ['5432:5432'], 'environment': {'POSTGRES_DB': 'photonix', 'POSTGRES_PASSWORD': 'password'}, 'volumes': ['../data/db:/var/lib/postgresql/data']}, 'redis': {'container_name': 'photonix-redis', 'image': 'redis:6.2.2', 'ports': ['6379:6379']}, 'photonix': {'container_name': 'photonix', 'image': 'photonix', 'build': {'context': '..', 'dockerfile': 'docker/Dockerfile.prd'}, 'ports': ['8888:80'], 'environment': {'ENV': 'prd', 'POSTGRES_HOST': 'postgres', 'POSTGRES_DB': 'photonix', 'POSTGRES_USER': 'postgres', 'POSTGRES_PASSWORD': 'password', 'REDIS_HOST': 'redis', 'ALLOWED_HOSTS': '*'}, 'volumes': ['../data/photos:/data/photos', '../data/raw-photos-processed:/data/raw-photos-processed', '../data/cache:/data/cache', '../data/models:/data/models'], 'links': ['postgres', 'redis']}}}"
photonixapp/photonix,latest,/docker/docker-compose.dev.yml,"{'version': '3', 'services': {'postgres': {'container_name': 'photonix-postgres', 'image': 'postgres:11.1-alpine', 'ports': ['5432:5432'], 'environment': {'POSTGRES_DB': 'photonix', 'POSTGRES_PASSWORD': 'password'}, 'volumes': ['../data/db:/var/lib/postgresql/data']}, 'redis': {'container_name': 'photonix-redis', 'image': 'redis:6.2.2', 'ports': ['6379:6379']}, 'photonix': {'container_name': 'photonix', 'image': 'photonix-dev', 'build': {'context': '..', 'dockerfile': 'docker/Dockerfile.dev'}, 'ports': ['8888:80', '8889:8000', '6006:6006', '8880:8001'], 'environment': {'ENV': 'dev', 'SAMPLE_DATA': 1, 'POSTGRES_HOST': 'postgres', 'POSTGRES_DB': 'photonix', 'POSTGRES_USER': 'postgres', 'POSTGRES_PASSWORD': 'password', 'REDIS_HOST': 'redis', 'ALLOWED_HOSTS': '*', 'LOG_LEVEL': 'DEBUG'}, 'volumes': ['../photonix:/srv/photonix', '../system:/srv/system', '../tests:/srv/tests', '../test.py:/srv/test.py', '../ui/public:/srv/ui/public', '../ui/src:/srv/ui/src', '../ui/.storybook:/srv/ui/.storybook', '../ui/static:/srv/ui/static', '../ui/stories:/srv/ui/stories', '../ui/package.json:/srv/ui/package.json', '../ui/yarn.lock:/srv/ui/yarn.lock', '../ui/config:/srv/ui/config', '../ui/scripts:/srv/ui/scripts', '../data/photos:/data/photos', '../data/raw-photos-processed:/data/raw-photos-processed', '../data/cache:/data/cache', '../data/models:/data/models', '../system/supervisord.conf:/etc/supervisord.conf'], 'links': ['postgres', 'redis']}}}"
photonixapp/photonix,latest,/.devcontainer/docker-compose.yml,"{'version': '3', 'services': {'photonix': {'volumes': ['..:/workspace:cached']}}}"
metabrainz/acousticbrainz-server,latest,/docker/docker-compose.jenkins.yml,"{'version': '3.4', 'services': {'db': {'image': 'postgres:10.5', 'environment': {'PGDATA': '/var/lib/postgresql/data/pgdata'}, 'command': 'postgres -F'}, 'acousticbrainz': {'build': {'context': '..', 'dockerfile': 'Dockerfile', 'target': 'acousticbrainz-test'}, 'depends_on': ['db', 'redis']}, 'redis': {'image': 'redis:4.0-alpine'}}}"
metabrainz/acousticbrainz-server,latest,/docker/docker-compose.dev.yml,"{'version': '3.4', 'volumes': {'postgres': None, 'postgreshome': None, 'webhome': None}, 'services': {'db': {'image': 'postgres:10.5', 'volumes': ['postgres:/var/lib/postgresql/data', 'postgreshome:/root'], 'ports': ['15432:5432']}, 'webserver': {'build': {'context': '..', 'dockerfile': 'Dockerfile', 'target': 'acousticbrainz-dev'}, 'environment': {'FLASK_APP': 'webserver', 'FLASK_ENV': 'development'}, 'command': 'flask run -h 0.0.0.0 -p 8080', 'volumes': ['../:/code', 'webhome:/root'], 'ports': ['8080:8080'], 'depends_on': ['db', 'redis']}, 'redis': {'image': 'redis:4.0-alpine'}, 'hl_extractor': {'build': {'context': '..', 'dockerfile': 'Dockerfile', 'target': 'acousticbrainz-dev'}, 'command': 'python2 worker_manage.py hl_extractor', 'volumes': ['../:/code'], 'depends_on': ['db']}, 'dataset_evaluator': {'build': {'context': '..', 'dockerfile': 'Dockerfile', 'target': 'acousticbrainz-dev'}, 'command': 'python2 worker_manage.py dataset_evaluator', 'volumes': ['../:/code', '../data/datasets:/data/datasets', '../data/files:/data/files'], 'depends_on': ['db']}}}"
metabrainz/acousticbrainz-server,latest,/docker/docker-compose.test.yml,"{'version': '3.4', 'volumes': {'postgres': None}, 'services': {'db': {'image': 'postgres:10.5', 'volumes': ['postgres:/var/lib/postgresql/data'], 'ports': ['15431:5432'], 'command': 'postgres -F'}, 'acousticbrainz': {'build': {'context': '..', 'dockerfile': 'Dockerfile', 'target': 'acousticbrainz-dev'}, 'volumes': ['..:/code:z'], 'depends_on': ['db', 'redis']}, 'redis': {'image': 'redis:4.0-alpine'}}}"
amor71/LiuAlgoTrader,latest,/database/docker-compose.yml,"{'version': '3.8', 'services': {'postgresql': {'image': 'postgres', 'container_name': 'pg-docker', 'environment': ['POSTGRES_USER={user_name}', 'POSTGRES_PASSWORD={password}', 'POSTGRES_DB={db_name}'], 'volumes': ['./liu.py-data:/var/lib/postgresql/data', './postgres.conf:/etc/postgresql/postgresql.conf', './schema.sql:/docker-entrypoint-initdb.d/schema.sql'], 'command': 'postgres -c config_file=/etc/postgresql/postgresql.conf', 'ports': ['5400:5432'], 'restart': 'always'}}}"
amor71/LiuAlgoTrader,latest,/database/docker-compose-windows.yml,"{'version': '3.8', 'services': {'postgresql': {'image': 'postgres', 'container_name': 'pg-docker', 'environment': ['POSTGRES_USER={user_name}', 'POSTGRES_PASSWORD={password}', 'POSTGRES_DB={db_name}', 'PGDATA=/tmp'], 'volumes': ['./liu.py-data:/var/lib/postgresql/data', './postgres.conf:/etc/postgresql/postgresql.conf', './schema.sql:/docker-entrypoint-initdb.d/schema.sql'], 'command': 'postgres -c config_file=/etc/postgresql/postgresql.conf', 'ports': ['5400:5432'], 'restart': 'always'}}}"
autogoal/autogoal,latest,/docker-compose.yml,"{'version': '2.3', 'services': {'autogoal': {'container_name': 'autogoal', 'hostname': 'autogoal', 'image': 'autogoal/autogoal', 'ports': ['8501:8501', '8000:8000'], 'volumes': ['./autogoal:/usr/lib/python3/dist-packages/autogoal', './vendor/illiterate/illiterate:/usr/lib/python3/dist-packages/illiterate', '~/.autogoal:/home/coder/.autogoal', '.:/home/coder/autogoal', '~/.ssh:/home/coder/.ssh', '~/.gitconfig:/home/coder/.gitconfig'], 'user': '1000:1000'}}}"
autogoal/autogoal,latest,/.devcontainer/docker-compose.yml,"{'version': '2.3', 'services': {'autogoal': {'command': '/bin/sh -c ""while sleep 1000; do :; done""'}}}"
Hydrospheredata/hydro-serving,latest,/docker-compose.yaml,"{'networks': {'extnet': {'driver': 'bridge'}, 'hydronet': {'internal': True, 'ipam': {'config': [{'subnet': '172.16.0.0/24'}]}, 'name': 'demo_hydronet'}}, 'services': {'gateway': {'container_name': 'gateway', 'depends_on': {'manager': {'condition': 'service_started'}}, 'environment': {'API_GATEWAY_GRPC_PORT': '9090', 'API_GATEWAY_HOST': 'managerui', 'API_GATEWAY_HTTP_PORT': '8080', 'GRPC_PORT': '9091', 'HTTP_PORT': '9090'}, 'image': 'hydrosphere/serving-gateway:68cbcda8208b24d1060445a319832feabf4008b2', 'networks': {'hydronet': {}}, 'ports': [{'published': 29090, 'target': 9090}, {'published': 29091, 'target': 9091}]}, 'hydro-auto-od': {'container_name': 'hydro-auto-od', 'depends_on': {'minio': {'condition': 'service_started'}, 'mongodb': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'CLUSTER_ENDPOINT': 'http://managerui:8080', 'DEBUG': 'false', 'DEFAULT_RUNTIME': 'hydrosphere/serving-runtime-python-3.7:3.0.0-dev4', 'DEFAULT_TIMEOUT': '120', 'GRPC_PORT': '5001', 'MONGO_AUTH_DB': 'admin', 'MONGO_DATABASE': 'hydro-serving-data-profiler', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'S3_ENDPOINT': 'http://minio:9000'}, 'image': 'hydrosphere/hydro-auto-od:44cd54bfbcd8b941ad1837c46355894be4fb4a34', 'networks': {'extnet': {}, 'hydronet': {}}}, 'manager': {'container_name': 'manager', 'depends_on': {'postgres': {'condition': 'service_started'}}, 'image': 'hydrosphere/serving-manager:e29d10eb36589ca966f1d0cecb3aafb4d333907f', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 19090, 'target': 9090}, {'published': 19091, 'target': 9091}], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock:rw']}, 'managerui': {'container_name': 'managerui', 'depends_on': {'gateway': {'condition': 'service_started'}, 'manager': {'condition': 'service_started'}, 'rootcause': {'condition': 'service_started'}, 'serving-sonar': {'condition': 'service_started'}, 'visualization': {'condition': 'service_started'}}, 'environment': {'AUTO_OD_GRPC_PORT': '5001', 'AUTO_OD_HOST': 'auto-od', 'GATEWAY_GRPC_PORT': '9091', 'GATEWAY_HOST': 'gateway', 'GATEWAY_HTTP_PORT': '9090', 'MANAGER_GRPC_PORT': '9091', 'MANAGER_HOST': 'manager', 'MANAGER_HTTP_PORT': '9090', 'MONITORING_GRPC_PORT': '9091', 'MONITORING_HOST': 'serving-sonar', 'MONITORING_HTTP_PORT': '9090', 'PROMETHEUS_AM_HOST': 'prometheus-am', 'ROOTCAUSE_HOST': 'rootcause', 'ROOTCAUSE_HTTP_PORT': '5000', 'STAT_HOST': 'stat', 'STAT_PORT': '5000', 'VISUALIZATION_HOST': 'visualization', 'VISUALIZATION_HTTP_PORT': '5000'}, 'image': 'hydrosphere/hydro-serving-ui:3.0.3', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 80, 'target': 8080}, {'published': 9090, 'target': 9090}]}, 'minio': {'container_name': 'minio', 'environment': {'MINIO_ACCESS_KEY': 'minio', 'MINIO_SECRET_KEY': 'minio123'}, 'image': 'bitnami/minio:2021.5.27-debian-10-r6', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 9000, 'target': 9000}]}, 'mongodb': {'container_name': 'mongodb', 'environment': {'MONGODB_ADVERTISED_HOSTNAME': 'mongodb', 'MONGODB_REPLICA_SET_KEY': 'replicasetkey123', 'MONGODB_REPLICA_SET_MODE': 'primary', 'MONGODB_ROOT_PASSWORD': 'hydr0s3rving'}, 'image': 'bitnami/mongodb:4.4.7-debian-10-r11', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 27017, 'target': 27017}], 'restart': 'on-failure'}, 'postgres': {'container_name': 'postgres', 'environment': {'POSTGRES_DB': 'docker', 'POSTGRES_PASSWORD': 'docker', 'POSTGRES_USER': 'docker'}, 'image': 'postgres:9.6-alpine', 'networks': {'hydronet': {}}, 'ports': [{'published': 5432, 'target': 5432}]}, 'prometheus-am': {'container_name': 'prometheus-am', 'image': 'prom/alertmanager', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 9093, 'target': 9093}]}, 'rootcause': {'command': 'service', 'container_name': 'rootcause', 'depends_on': {'mongodb': {'condition': 'service_started'}, 'rootcause-worker': {'condition': 'service_started'}, 'serving-sonar': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'DEBUG': 'False', 'GRPC_UI_ADDRESS': 'managerui', 'HTTP_UI_ADDRESS': 'http://managerui:8080', 'MONGO_AUTH_DB': 'admin', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'ROOTCAUSE_DB_NAME': 'rootcause', 'S3_ENDPOINT': 'http://minio:9000'}, 'image': 'hydrosphere/hydro-root-cause:3.0.3', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 5005, 'target': 5000}]}, 'rootcause-worker': {'command': 'worker', 'container_name': 'rootcause-worker', 'depends_on': {'mongodb': {'condition': 'service_started'}, 'serving-sonar': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'DEBUG': 'False', 'GRPC_UI_ADDRESS': 'managerui:9090', 'HTTP_UI_ADDRESS': 'http://managerui:8080', 'MONGO_AUTH_DB': 'admin', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'ROOTCAUSE_DB_NAME': 'rootcause', 'S3_ENDPOINT': 'http://minio:9000'}, 'image': 'hydrosphere/hydro-root-cause:3.0.3', 'networks': {'hydronet': {}}}, 'serving-sonar': {'container_name': 'serving-sonar', 'depends_on': {'postgres': {'condition': 'service_started'}}, 'environment': {'ALERTING_FRONTEND_URL': 'http://localhost/', 'ALERTING_MANAGER_URL': 'prometheus-am:9093', 'DB_JDBC_URL': 'jdbc:postgresql://postgres:5432/docker', 'DB_PASS': 'docker', 'DB_TYPE': 'postgres', 'DB_USER': 'docker', 'GRPC_PORT': '9091', 'HTTP_PORT': '9090', 'MONGO_AUTH_DB': 'admin', 'MONGO_HOST': 'mongodb', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_USER': 'root', 'SIDECAR_GRPC_PORT': '9090', 'SIDECAR_HOST': 'managerui', 'SIDECAR_HTTP_PORT': '8080', 'STORAGE_ACCESS_KEY': 'minio', 'STORAGE_ENDPOINT': 'http://minio:9000', 'STORAGE_PATH_STYLE_ACCESS': 'true', 'STORAGE_S3_IMPL': 'org.apache.hadoop.fs.s3a.S3AFileSystem', 'STORAGE_SECRET_KEY': 'minio123'}, 'image': 'hydrosphere/sonar:3.0.3', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 39090, 'target': 9090}, {'published': 39091, 'target': 9091}]}, 'stat': {'container_name': 'stat', 'depends_on': {'minio': {'condition': 'service_started'}, 'mongodb': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'HTTP_UI_ADDRESS': 'http://managerui:8080', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'S3_ENDPOINT': 'http://minio:9000'}, 'image': 'hydrosphere/hydro-stat:3.0.3', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 5002, 'target': 5000}]}, 'visualization': {'command': 'service', 'container_name': 'visualization', 'depends_on': {'minio': {'condition': 'service_started'}, 'mongodb': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'AWS_STORAGE_ENDPOINT': 'http://minio:9000', 'DEBUG': 'False', 'GRPC_PORT': '5003', 'GRPC_PROXY_ADDRESS': 'managerui:9090', 'HTTP_PROXY_ADDRESS': 'http://managerui:8080', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'SECURE': 'False'}, 'image': 'hydrosphere/hydro-visualization:3.0.3', 'networks': {'extnet': {}, 'hydronet': {}}, 'ports': [{'published': 5000, 'target': 5000}]}, 'visualization-worker': {'command': 'worker', 'container_name': 'visualization-worker', 'depends_on': {'minio': {'condition': 'service_started'}, 'mongodb': {'condition': 'service_started'}, 'visualization': {'condition': 'service_started'}}, 'environment': {'AWS_ACCESS_KEY_ID': 'minio', 'AWS_SECRET_ACCESS_KEY': 'minio123', 'AWS_STORAGE_ENDPOINT': 'http://minio:9000', 'DEBUG': 'False', 'GRPC_PROXY_ADDRESS': 'managerui:9090', 'HTTP_PROXY_ADDRESS': 'http://managerui:8080', 'MONGO_PASS': 'hydr0s3rving', 'MONGO_PORT': '27017', 'MONGO_URL': 'mongodb', 'MONGO_USER': 'root', 'SECURE': 'False'}, 'image': 'hydrosphere/hydro-visualization:3.0.3', 'networks': {'hydronet': {}}}}, 'version': '3.5', 'volumes': {'sonardata': {}}}"
recognai/rubrix,latest,/docker-compose.yaml,"{'version': '3', 'services': {'rubrix': {'image': 'recognai/rubrix:latest', 'ports': ['6900:80'], 'environment': {'ELASTICSEARCH': 'http://elasticsearch:9200'}, 'networks': ['rubrix']}, 'elasticsearch': {'image': 'docker.elastic.co/elasticsearch/elasticsearch:7.11.1', 'container_name': 'elasticsearch', 'environment': ['node.name=elasticsearch', 'cluster.name=es-rubrix-local', 'discovery.type=single-node', 'ES_JAVA_OPTS=-Xms512m -Xmx512m'], 'ulimits': {'memlock': {'soft': -1, 'hard': -1}}, 'networks': ['rubrix']}, 'kibana': {'image': 'docker.elastic.co/kibana/kibana:7.11.1', 'container_name': 'kibana', 'ports': ['5601:5601'], 'environment': {'ELASTICSEARCH_URL': 'http://elasticsearch:9200', 'ELASTICSEARCH_HOSTS': '[""http://elasticsearch:9200""]'}, 'networks': ['rubrix']}}, 'networks': {'rubrix': {'driver': 'bridge'}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/trino/tests/docker-compose.yml,"{'version': '3', 'services': {'trino-server': {'image': 'trinodb/trino', 'restart': 'always', 'ports': ['8080:8080']}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/ldap/tests/docker-compose.yml,"{'version': '3.3', 'services': {'openldap': {'image': 'osixia/openldap:1.5.0', 'command': '--copy-service', 'environment': {'LDAP_ORGANISATION': 'example', 'LDAP_DOMAIN': 'example.com', 'LDAP_ADMIN_PASSWORD': 'ldappassword'}, 'ports': ['389:389', '636:636'], 'volumes': ['./bootstrap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/bootstrap.ldif']}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/mlflow/docker-compose.yml,"{'version': '3', 'services': {'mlflow-db': {'container_name': 'mlflow-db', 'image': 'mysql', 'restart': 'always', 'command': '--port=3307', 'ports': ['3307:3307'], 'environment': ['MYSQL_DATABASE=experiments', 'MYSQL_USER=mlflow', 'MYSQL_PASSWORD=password', 'MYSQL_ROOT_PASSWORD=root'], 'volumes': ['./db:/var/lib/mysql'], 'cap_add': ['SYS_NICE']}, 'mlflow-artifact': {'image': 'minio/minio', 'environment': ['MINIO_ACCESS_KEY=minio', 'MINIO_SECRET_KEY=password'], 'ports': ['9000:9000', '9001:9001'], 'command': ['minio', 'server', '--address', ':9001', '--console-address', ':9000', '/data']}, 'mlflow': {'container_name': 'mlflow', 'build': '.', 'image': 'mlflow', 'restart': 'always', 'depends_on': ['mlflow-db', 'mlflow-artifact'], 'ports': ['5000:5000'], 'environment': ['MLFLOW_S3_ENDPOINT_URL=http://localhost:9000', 'AWS_ACCESS_KEY_ID=""minio""', 'AWS_SECRET_ACCESS_KEY=""password""'], 'command': 'mlflow server --backend-store-uri mysql+pymysql://mlflow:password@mlflow-db:3307/experiments --default-artifact-root s3://mlops.local.com --host 0.0.0.0'}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/postgres/tests/docker-compose.yml,"{'version': '3.9', 'services': {'postgres': {'image': 'postgres', 'restart': 'always', 'environment': {'POSTGRES_USER': 'catalog_user', 'POSTGRES_PASSWORD': 'catalog_password', 'POSTGRES_DB': 'pagila'}, 'ports': ['5433:5432']}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/mysql/tests/docker-compose.yml,"{'version': '3.9', 'services': {'db': {'image': 'mysql/mysql-server:latest', 'restart': 'always', 'environment': {'MYSQL_ROOT_PASSWORD': 'password', 'MYSQL_USER': 'catalog_user', 'MYSQL_PASSWORD': 'catalog_password', 'MYSQL_DATABASE': 'catalog_test'}, 'volumes': ['./setup/setup.sql:/docker-entrypoint-initdb.d/setup.sql'], 'expose': [3306], 'ports': ['3307:3306']}}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/hive/tests/docker-compose.yml,"{'version': '3', 'services': {'namenode': {'image': 'bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8', 'volumes': ['namenode:/hadoop/dfs/name'], 'environment': ['CLUSTER_NAME=test'], 'env_file': ['hadoop-hive.env'], 'ports': ['50070:50070']}, 'datanode': {'image': 'bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8', 'volumes': ['datanode:/hadoop/dfs/data'], 'env_file': ['hadoop-hive.env'], 'environment': {'SERVICE_PRECONDITION': 'namenode:50070'}, 'ports': ['50075:50075']}, 'hive-server': {'image': 'bde2020/hive:2.3.2-postgresql-metastore', 'env_file': ['hadoop-hive.env'], 'command': 'sh /setup/setup.sh', 'volumes': ['./setup:/setup'], 'environment': {'HIVE_CORE_CONF_javax_jdo_option_ConnectionURL': 'jdbc:postgresql://hive-metastore/metastore', 'SERVICE_PRECONDITION': 'hive-metastore:9083'}, 'ports': ['10000:10000']}, 'hive-metastore': {'image': 'bde2020/hive:2.3.2-postgresql-metastore', 'env_file': ['hadoop-hive.env'], 'command': '/opt/hive/bin/hive --service metastore', 'environment': {'SERVICE_PRECONDITION': 'namenode:50070 datanode:50075 hive-metastore-postgresql:5432'}, 'ports': ['9083:9083']}, 'hive-metastore-postgresql': {'image': 'bde2020/hive-metastore-postgresql:2.3.0'}}, 'volumes': {'namenode': None, 'datanode': None}}"
open-metadata/OpenMetadata,latest,/ingestion/tests/integration/source/mssql/tests/docker-compose.yml,"{'version': '3.9', 'services': {'sqlserver': {'image': 'mcr.microsoft.com/mssql/server:latest', 'environment': {'ACCEPT_EULA': 'Y', 'SA_PASSWORD': 'test!Password'}, 'command': './setup/setup.sh', 'volumes': ['./setup:/setup'], 'ports': ['1433:1433']}}}"
open-metadata/OpenMetadata,latest,/docker/local-metadata/docker-compose.yml,"{'version': '3.9', 'services': {'mysql': {'build': {'context': '../../.', 'dockerfile': 'docker/local-metadata/Dockerfile_mysql'}, 'container_name': 'openmetadata_mysql', 'restart': 'always', 'environment': {'MYSQL_ROOT_PASSWORD': 'password'}, 'expose': [3306], 'ports': ['3306:3306'], 'networks': {'local_app_net': {'ipv4_address': '172.16.239.10'}}}, 'elasticsearch': {'image': 'docker.elastic.co/elasticsearch/elasticsearch:7.10.2', 'container_name': 'openmetadata_elasticsearch', 'environment': ['discovery.type=single-node', 'ES_JAVA_OPTS=-Xms1024m -Xmx1024m'], 'networks': {'local_app_net': {'ipv4_address': '172.16.239.11'}}, 'expose': [9200, 9300], 'ports': ['9200:9200', '9300:9300']}, 'openmetadata-server': {'build': {'context': '../../.', 'dockerfile': 'docker/local-metadata/Dockerfile'}, 'container_name': 'openmetadata_server', 'expose': [8585, 9200, 9300, 3306], 'ports': ['8585:8585'], 'depends_on': ['mysql'], 'networks': {'local_app_net': {'ipv4_address': '172.16.239.13'}}, 'extra_hosts': ['localhost:172.16.239.10', 'elasticsearch:172.16.239.11']}, 'ingestion': {'build': {'context': '../../.', 'dockerfile': 'ingestion/Dockerfile'}, 'container_name': 'openmetadata_ingestion', 'depends_on': ['mysql'], 'expose': [8080], 'ports': ['8080:8080'], 'networks': ['local_app_net'], 'extra_hosts': ['localhost:172.16.239.10', 'localhost:172.16.239.11', 'localhost:172.16.239.13'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock']}}, 'networks': {'local_app_net': {'ipam': {'driver': 'default', 'config': [{'subnet': '172.16.239.0/24'}]}}}}"
open-metadata/OpenMetadata,latest,/docker/local-metadata/docker-compose-dev.yml,"{'version': '3.9', 'services': {'mysql': {'image': 'openmetadata/db:latest', 'restart': 'always', 'environment': {'MYSQL_ROOT_PASSWORD': 'password'}, 'ports': ['3306:3306'], 'networks': {'app_net': {'ipv4_address': '172.16.239.10'}}}, 'elasticsearch': {'image': 'docker.elastic.co/elasticsearch/elasticsearch:7.10.2', 'environment': ['discovery.type=single-node'], 'networks': {'app_net': {'ipv4_address': '172.16.239.11'}}, 'ports': ['9200:9200', '9300:9300']}}, 'networks': {'app_net': {'ipam': {'driver': 'default', 'config': [{'subnet': '172.16.239.0/24'}]}}}}"
open-metadata/OpenMetadata,latest,/docker/metadata/docker-compose.yml,"{'version': '3.9', 'services': {'mysql': {'container_name': 'openmetadata_mysql', 'image': 'openmetadata/db:0.7.0', 'restart': 'always', 'environment': {'MYSQL_ROOT_PASSWORD': 'password'}, 'expose': [3306], 'networks': {'app_net': {'ipv4_address': '172.16.240.10'}}}, 'elasticsearch': {'container_name': 'openmetadata_elasticsearch', 'image': 'docker.elastic.co/elasticsearch/elasticsearch:7.10.2', 'environment': ['discovery.type=single-node', 'ES_JAVA_OPTS=-Xms1024m -Xmx1024m'], 'networks': {'app_net': {'ipv4_address': '172.16.240.11'}}, 'ports': ['9200:9200', '9300:9300']}, 'openmetadata-server': {'container_name': 'openmetadata_server', 'restart': 'always', 'image': 'openmetadata/server:0.7.0', 'expose': [8585, 9200, 9300, 3306], 'ports': ['8585:8585'], 'depends_on': ['mysql'], 'networks': {'app_net': {'ipv4_address': '172.16.240.13'}}, 'extra_hosts': ['localhost:172.16.240.10', 'elasticsearch:172.16.240.11']}, 'ingestion': {'container_name': 'openmetadata_ingestion', 'image': 'openmetadata/ingestion:0.7.0', 'depends_on': ['mysql'], 'expose': [8080], 'ports': ['8080:8080'], 'networks': ['app_net'], 'extra_hosts': ['localhost:172.16.240.10', 'localhost:172.16.240.11', 'localhost:172.16.240.13']}}, 'networks': {'app_net': {'ipam': {'driver': 'default', 'config': [{'subnet': '172.16.240.0/24'}]}}}}"
SAP/credential-digger,latest,/docker-compose.postgres.yml,"{'version': '3', 'services': {'postgres': {'image': 'postgres:12-alpine', 'shm_size': '1gb', 'restart': 'always', 'container_name': 'postgres', 'volumes': ['creddig_db:/var/lib/postgresql/data', './sql:/docker-entrypoint-initdb.d/'], 'env_file': ['./.env'], 'ports': ['5432:${DBPORT}']}, 'credential_digger': {'build': {'context': './ui', 'dockerfile': 'Dockerfile', 'args': ['SSL_certificate=$SSL_certificate', 'SSL_private_key=$SSL_private_key']}, 'container_name': 'credential_digger_backend', 'image': 'credential-digger_pg', 'restart': 'always', 'env_file': ['./.env'], 'environment': ['USE_PG=True'], 'ports': ['5000:5000'], 'deploy': {'resources': {'limits': {'memory': '16G'}, 'reservations': {'memory': '6G'}}}}}, 'volumes': {'creddig_db': None}}"
SAP/credential-digger,latest,/docker-compose.yml,"{'version': '3', 'services': {'credential_digger': {'build': {'context': './ui', 'dockerfile': 'Dockerfile', 'args': ['SSL_certificate=$SSL_certificate', 'SSL_private_key=$SSL_private_key']}, 'container_name': 'credential_digger_sqlite', 'image': 'credential-digger_sqlite', 'restart': 'always', 'env_file': ['./.env'], 'ports': ['5000:5000']}}}"
locationtech/rasterframes,latest,/rf-notebook/src/main/docker/docker-compose.yml,"{'version': '3', 'services': {'rasterframes-notebook': {'image': 's22s/rasterframes-notebook', 'ports': ['8888:8888', '44040:4040', '44041:4041', '44042:4042', '44043:4043', '44044:4044'], 'volumes': ['../../../src/main/notebooks:/home/jovyan/work', '~/.rf_cache:/home/jovyan/.rf_cache']}}}"
roflcoopter/viseron,latest,/azure-pipelines/docker-compose-build.yaml,"{'version': '2.4', 'services': {'amd64-ffmpeg': {'build': {'context': '..', 'dockerfile': './docker/amd64/Dockerfile.ffmpeg', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'AOM_VERSION': '$AOM_VERSION', 'FDKAAC_VERSION': '$FDKAAC_VERSION', 'FONTCONFIG_VERSION': '$FONTCONFIG_VERSION', 'FREETYPE_VERSION': '$FREETYPE_VERSION', 'FRIBIDI_VERSION': '$FRIBIDI_VERSION', 'KVAZAAR_VERSION': '$KVAZAAR_VERSION', 'LAME_VERSION': '$LAME_VERSION', 'LIBASS_VERSION': '$LIBASS_VERSION', 'LIBPTHREAD_STUBS_VERSION': '$LIBPTHREAD_STUBS_VERSION', 'LIBVIDSTAB_VERSION': '$LIBVIDSTAB_VERSION', 'LIBXCB_VERSION': '$LIBXCB_VERSION', 'XCBPROTO_VERSION': '$XCBPROTO_VERSION', 'OGG_VERSION': '$OGG_VERSION', 'OPENCOREAMR_VERSION': '$OPENCOREAMR_VERSION', 'OPUS_VERSION': '$OPUS_VERSION', 'OPENJPEG_VERSION': '$OPENJPEG_VERSION', 'THEORA_VERSION': '$THEORA_VERSION', 'VORBIS_VERSION': '$VORBIS_VERSION', 'VPX_VERSION': '$VPX_VERSION', 'WEBP_VERSION': '$WEBP_VERSION', 'X264_VERSION': '$X264_VERSION', 'X265_VERSION': '$X265_VERSION', 'XAU_VERSION': '$XAU_VERSION', 'XORG_MACROS_VERSION': '$XORG_MACROS_VERSION', 'XPROTO_VERSION': '$XPROTO_VERSION', 'XVID_VERSION': '$XVID_VERSION', 'LIBXML2_VERSION': '$LIBXML2_VERSION', 'LIBBLURAY_VERSION': '$LIBBLURAY_VERSION', 'LIBZMQ_VERSION': '$LIBZMQ_VERSION', 'FREETYPE_SHA256SUM': '$FREETYPE_SHA256SUM', 'FRIBIDI_SHA256SUM': '$FRIBIDI_SHA256SUM', 'LIBASS_SHA256SUM': '$LIBASS_SHA256SUM', 'LIBVIDSTAB_SHA256SUM': '$LIBVIDSTAB_SHA256SUM', 'OGG_SHA256SUM': '$OGG_SHA256SUM', 'OPUS_SHA256SUM': '$OPUS_SHA256SUM', 'THEORA_SHA256SUM': '$THEORA_SHA256SUM', 'VORBIS_SHA256SUM': '$VORBIS_SHA256SUM', 'XVID_SHA256SUM': '$XVID_SHA256SUM', 'LIBXML2_SHA256SUM': '$LIBXML2_SHA256SUM', 'LIBBLURAY_SHA256SUM': '$LIBBLURAY_SHA256SUM', 'LIBZMQ_SHA256SUM': '$LIBZMQ_SHA256SUM'}, 'cache_from': ['roflcoopter/amd64-ffmpeg:$FFMPEG_VERSION']}, 'image': 'roflcoopter/amd64-ffmpeg:$FFMPEG_VERSION'}, 'amd64-opencv': {'build': {'context': '..', 'dockerfile': './docker/amd64/Dockerfile.opencv', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION'}, 'cache_from': ['roflcoopter/amd64-opencv:$OPENCV_VERSION']}, 'image': 'roflcoopter/amd64-opencv:$OPENCV_VERSION'}, 'amd64-dlib': {'build': {'context': '..', 'dockerfile': './docker/amd64/Dockerfile.dlib', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/amd64-dlib:$DLIB_VERSION']}, 'image': 'roflcoopter/amd64-dlib:$DLIB_VERSION'}, 'amd64-wheels': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.wheels', 'args': {'ARCH': 'amd64', 'BUILD_FROM': 'ubuntu:$UBUNTU_VERSION', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/amd64-wheels:$WHEELS_VERSION']}, 'image': 'roflcoopter/amd64-wheels:$WHEELS_VERSION'}, 'amd64-base': {'build': {'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'OPENCL_VERSION': '$OPENCL_VERSION', 'GMMLIB_VERSION': '$GMMLIB_VERSION', 'IGC_VERSION': '$IGC_VERSION', 'LEVEL_ZERO_GPU': '$LEVEL_ZERO_GPU'}, 'context': '..', 'dockerfile': './docker/amd64/Dockerfile.base', 'cache_from': ['roflcoopter/amd64-base:$BASE_VERSION']}, 'image': 'roflcoopter/amd64-base:$BASE_VERSION'}, 'amd64-viseron': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile', 'args': {'ARCH': 'amd64', 'BASE_VERSION': '$BASE_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'WHEELS_VERSION': '$WHEELS_VERSION', 'S6_OVERLAY_ARCH': 'amd64', 'S6_OVERLAY_VERSION': '$S6_OVERLAY_VERSION'}, 'cache_from': ['roflcoopter/amd64-viseron:dev']}, 'image': 'roflcoopter/amd64-viseron:dev'}, 'amd64-viseron-tests': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.tests', 'args': {'ARCH': 'amd64', 'VISERON_VERSION': 'dev'}}, 'image': 'roflcoopter/amd64-viseron-tests:dev', 'container_name': 'amd64-viseron-tests', 'entrypoint': '', 'command': 'bash -c ""pytest --cov=viseron/ --cov-report term-missing -s tests && coverage xml""\n'}, 'amd64-cuda-ffmpeg': {'build': {'context': '..', 'dockerfile': './docker/amd64-cuda/Dockerfile.ffmpeg', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'AOM_VERSION': '$AOM_VERSION', 'FDKAAC_VERSION': '$FDKAAC_VERSION', 'FONTCONFIG_VERSION': '$FONTCONFIG_VERSION', 'FREETYPE_VERSION': '$FREETYPE_VERSION', 'FRIBIDI_VERSION': '$FRIBIDI_VERSION', 'KVAZAAR_VERSION': '$KVAZAAR_VERSION', 'LAME_VERSION': '$LAME_VERSION', 'LIBASS_VERSION': '$LIBASS_VERSION', 'LIBPTHREAD_STUBS_VERSION': '$LIBPTHREAD_STUBS_VERSION', 'LIBVIDSTAB_VERSION': '$LIBVIDSTAB_VERSION', 'LIBXCB_VERSION': '$LIBXCB_VERSION', 'XCBPROTO_VERSION': '$XCBPROTO_VERSION', 'OGG_VERSION': '$OGG_VERSION', 'OPENCOREAMR_VERSION': '$OPENCOREAMR_VERSION', 'OPUS_VERSION': '$OPUS_VERSION', 'OPENJPEG_VERSION': '$OPENJPEG_VERSION', 'THEORA_VERSION': '$THEORA_VERSION', 'VORBIS_VERSION': '$VORBIS_VERSION', 'VPX_VERSION': '$VPX_VERSION', 'WEBP_VERSION': '$WEBP_VERSION', 'X264_VERSION': '$X264_VERSION', 'X265_VERSION': '$X265_VERSION', 'XAU_VERSION': '$XAU_VERSION', 'XORG_MACROS_VERSION': '$XORG_MACROS_VERSION', 'XPROTO_VERSION': '$XPROTO_VERSION', 'XVID_VERSION': '$XVID_VERSION', 'LIBXML2_VERSION': '$LIBXML2_VERSION', 'LIBBLURAY_VERSION': '$LIBBLURAY_VERSION', 'LIBZMQ_VERSION': '$LIBZMQ_VERSION', 'FREETYPE_SHA256SUM': '$FREETYPE_SHA256SUM', 'FRIBIDI_SHA256SUM': '$FRIBIDI_SHA256SUM', 'LIBASS_SHA256SUM': '$LIBASS_SHA256SUM', 'LIBVIDSTAB_SHA256SUM': '$LIBVIDSTAB_SHA256SUM', 'OGG_SHA256SUM': '$OGG_SHA256SUM', 'OPUS_SHA256SUM': '$OPUS_SHA256SUM', 'THEORA_SHA256SUM': '$THEORA_SHA256SUM', 'VORBIS_SHA256SUM': '$VORBIS_SHA256SUM', 'XVID_SHA256SUM': '$XVID_SHA256SUM', 'LIBXML2_SHA256SUM': '$LIBXML2_SHA256SUM', 'LIBBLURAY_SHA256SUM': '$LIBBLURAY_SHA256SUM', 'LIBZMQ_SHA256SUM': '$LIBZMQ_SHA256SUM', 'CUDA_VERSION': '$CUDA_VERSION', 'UBUNTU_VERSION_NUMBER': '$UBUNTU_VERSION_NUMBER', 'VIDEO_CODEC_SDK_VERSION': '$VIDEO_CODEC_SDK_VERSION'}, 'cache_from': ['roflcoopter/amd64-cuda-ffmpeg:$FFMPEG_VERSION']}, 'image': 'roflcoopter/amd64-cuda-ffmpeg:$FFMPEG_VERSION'}, 'amd64-cuda-opencv': {'build': {'context': '..', 'dockerfile': './docker/amd64-cuda/Dockerfile.opencv', 'args': {'CUDA_VERSION': '$CUDA_VERSION', 'UBUNTU_VERSION_NUMBER': '$UBUNTU_VERSION_NUMBER', 'MAKEFLAGS': '$MAKEFLAGS', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION'}, 'cache_from': ['roflcoopter/amd64-cuda-opencv:$OPENCV_VERSION']}, 'image': 'roflcoopter/amd64-cuda-opencv:$OPENCV_VERSION'}, 'amd64-cuda-dlib': {'build': {'context': '..', 'dockerfile': './docker/amd64-cuda/Dockerfile.dlib', 'args': {'CUDA_VERSION': '$CUDA_VERSION', 'UBUNTU_VERSION_NUMBER': '$UBUNTU_VERSION_NUMBER', 'MAKEFLAGS': '$MAKEFLAGS', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/amd64-cuda-dlib:$DLIB_VERSION']}, 'image': 'roflcoopter/amd64-cuda-dlib:$DLIB_VERSION'}, 'amd64-cuda-wheels': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.wheels', 'args': {'ARCH': 'amd64-cuda', 'BUILD_FROM': 'ubuntu:$UBUNTU_VERSION', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/amd64-cuda-wheels:$WHEELS_VERSION']}, 'image': 'roflcoopter/amd64-cuda-wheels:$WHEELS_VERSION'}, 'amd64-cuda-base': {'build': {'context': '..', 'dockerfile': './docker/amd64-cuda/Dockerfile.base', 'args': {'CUDA_VERSION': '$CUDA_VERSION', 'UBUNTU_VERSION_NUMBER': '$UBUNTU_VERSION_NUMBER', 'OPENCL_VERSION': '$OPENCL_VERSION', 'GMMLIB_VERSION': '$GMMLIB_VERSION', 'IGC_VERSION': '$IGC_VERSION', 'LEVEL_ZERO_GPU': '$LEVEL_ZERO_GPU'}, 'cache_from': ['roflcoopter/amd64-cuda-base:$BASE_VERSION']}, 'image': 'roflcoopter/amd64-cuda-base:$BASE_VERSION'}, 'amd64-cuda-viseron': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile', 'args': {'ARCH': 'amd64-cuda', 'BASE_VERSION': '$BASE_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'WHEELS_VERSION': '$WHEELS_VERSION', 'S6_OVERLAY_ARCH': 'amd64', 'S6_OVERLAY_VERSION': '$S6_OVERLAY_VERSION'}, 'cache_from': ['roflcoopter/amd64-cuda-viseron:dev']}, 'image': 'roflcoopter/amd64-cuda-viseron:dev'}, 'rpi3-ffmpeg': {'build': {'context': '..', 'dockerfile': './docker/rpi3/Dockerfile.ffmpeg', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'AOM_VERSION': '$AOM_VERSION', 'FDKAAC_VERSION': '$FDKAAC_VERSION', 'FONTCONFIG_VERSION': '$FONTCONFIG_VERSION', 'FREETYPE_VERSION': '$FREETYPE_VERSION', 'FRIBIDI_VERSION': '$FRIBIDI_VERSION', 'KVAZAAR_VERSION': '$KVAZAAR_VERSION', 'LAME_VERSION': '$LAME_VERSION', 'LIBASS_VERSION': '$LIBASS_VERSION', 'LIBPTHREAD_STUBS_VERSION': '$LIBPTHREAD_STUBS_VERSION', 'LIBVIDSTAB_VERSION': '$LIBVIDSTAB_VERSION', 'LIBXCB_VERSION': '$LIBXCB_VERSION', 'XCBPROTO_VERSION': '$XCBPROTO_VERSION', 'OGG_VERSION': '$OGG_VERSION', 'OPENCOREAMR_VERSION': '$OPENCOREAMR_VERSION', 'OPUS_VERSION': '$OPUS_VERSION', 'OPENJPEG_VERSION': '$OPENJPEG_VERSION', 'THEORA_VERSION': '$THEORA_VERSION', 'VORBIS_VERSION': '$VORBIS_VERSION', 'VPX_VERSION': '$VPX_VERSION', 'WEBP_VERSION': '$WEBP_VERSION', 'X264_VERSION': '$X264_VERSION', 'X265_VERSION': '$X265_VERSION', 'XAU_VERSION': '$XAU_VERSION', 'XORG_MACROS_VERSION': '$XORG_MACROS_VERSION', 'XPROTO_VERSION': '$XPROTO_VERSION', 'XVID_VERSION': '$XVID_VERSION', 'LIBXML2_VERSION': '$LIBXML2_VERSION', 'LIBBLURAY_VERSION': '$LIBBLURAY_VERSION', 'LIBZMQ_VERSION': '$LIBZMQ_VERSION', 'FREETYPE_SHA256SUM': '$FREETYPE_SHA256SUM', 'FRIBIDI_SHA256SUM': '$FRIBIDI_SHA256SUM', 'LIBASS_SHA256SUM': '$LIBASS_SHA256SUM', 'LIBVIDSTAB_SHA256SUM': '$LIBVIDSTAB_SHA256SUM', 'OGG_SHA256SUM': '$OGG_SHA256SUM', 'OPUS_SHA256SUM': '$OPUS_SHA256SUM', 'THEORA_SHA256SUM': '$THEORA_SHA256SUM', 'VORBIS_SHA256SUM': '$VORBIS_SHA256SUM', 'XVID_SHA256SUM': '$XVID_SHA256SUM', 'LIBXML2_SHA256SUM': '$LIBXML2_SHA256SUM', 'LIBBLURAY_SHA256SUM': '$LIBBLURAY_SHA256SUM', 'LIBZMQ_SHA256SUM': '$LIBZMQ_SHA256SUM', 'CMAKE_VERSION': '$CMAKE_VERSION'}, 'cache_from': ['roflcoopter/rpi3-ffmpeg:$FFMPEG_VERSION']}, 'image': 'roflcoopter/rpi3-ffmpeg:$FFMPEG_VERSION'}, 'rpi3-python': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.python', 'args': {'MAKEFLAGS': '$MAKEFLAGS', 'PYTHON_VERSION': '$PYTHON_VERSION'}, 'cache_from': ['roflcoopter/rpi3-python:$PYTHON_VERSION']}, 'image': 'roflcoopter/rpi3-python:$PYTHON_VERSION'}, 'rpi3-opencv': {'build': {'context': '..', 'dockerfile': './docker/rpi3/Dockerfile.opencv', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'CMAKE_VERSION': '$CMAKE_VERSION'}, 'cache_from': ['roflcoopter/rpi3-opencv:$OPENCV_VERSION']}, 'image': 'roflcoopter/rpi3-opencv:$OPENCV_VERSION'}, 'rpi3-dlib': {'build': {'context': '..', 'dockerfile': './docker/rpi3/Dockerfile.dlib', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'DLIB_VERSION': '$DLIB_VERSION', 'CMAKE_VERSION': '$CMAKE_VERSION'}, 'cache_from': ['roflcoopter/rpi3-dlib:$DLIB_VERSION']}, 'image': 'roflcoopter/rpi3-dlib:$DLIB_VERSION'}, 'rpi3-wheels': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.wheels', 'args': {'ARCH': 'rpi3', 'BUILD_FROM': 'balenalib/raspberrypi3-ubuntu:$UBUNTU_VERSION-build', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/rpi3-wheels:$WHEELS_VERSION']}, 'image': 'roflcoopter/rpi3-wheels:$WHEELS_VERSION'}, 'rpi3-base': {'build': {'context': '..', 'dockerfile': './docker/rpi3/Dockerfile.base', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION'}, 'cache_from': ['roflcoopter/rpi3-base:$BASE_VERSION']}, 'image': 'roflcoopter/rpi3-base:$BASE_VERSION'}, 'rpi3-viseron': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile', 'args': {'ARCH': 'rpi3', 'BASE_VERSION': '$BASE_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'WHEELS_VERSION': '$WHEELS_VERSION', 'S6_OVERLAY_ARCH': 'armhf', 'S6_OVERLAY_VERSION': '$S6_OVERLAY_VERSION'}, 'cache_from': ['roflcoopter/rpi3-viseron:dev']}, 'image': 'roflcoopter/rpi3-viseron:dev'}, 'rpi3-cmake': {'build': {'context': '..', 'dockerfile': './docker/rpi3/Dockerfile.cmake', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'CMAKE_VERSION': '$CMAKE_VERSION'}, 'cache_from': ['roflcoopter/rpi3-cmake:$CMAKE_VERSION']}, 'image': 'roflcoopter/rpi3-cmake:$CMAKE_VERSION'}, 'aarch64-ffmpeg': {'build': {'context': '..', 'dockerfile': './docker/aarch64/Dockerfile.ffmpeg', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'AOM_VERSION': '$AOM_VERSION', 'FDKAAC_VERSION': '$FDKAAC_VERSION', 'FONTCONFIG_VERSION': '$FONTCONFIG_VERSION', 'FREETYPE_VERSION': '$FREETYPE_VERSION', 'FRIBIDI_VERSION': '$FRIBIDI_VERSION', 'KVAZAAR_VERSION': '$KVAZAAR_VERSION', 'LAME_VERSION': '$LAME_VERSION', 'LIBASS_VERSION': '$LIBASS_VERSION', 'LIBPTHREAD_STUBS_VERSION': '$LIBPTHREAD_STUBS_VERSION', 'LIBVIDSTAB_VERSION': '$LIBVIDSTAB_VERSION', 'LIBXCB_VERSION': '$LIBXCB_VERSION', 'XCBPROTO_VERSION': '$XCBPROTO_VERSION', 'OGG_VERSION': '$OGG_VERSION', 'OPENCOREAMR_VERSION': '$OPENCOREAMR_VERSION', 'OPUS_VERSION': '$OPUS_VERSION', 'OPENJPEG_VERSION': '$OPENJPEG_VERSION', 'THEORA_VERSION': '$THEORA_VERSION', 'VORBIS_VERSION': '$VORBIS_VERSION', 'VPX_VERSION': '$VPX_VERSION', 'WEBP_VERSION': '$WEBP_VERSION', 'X264_VERSION': '$X264_VERSION', 'X265_VERSION': '$X265_VERSION', 'XAU_VERSION': '$XAU_VERSION', 'XORG_MACROS_VERSION': '$XORG_MACROS_VERSION', 'XPROTO_VERSION': '$XPROTO_VERSION', 'XVID_VERSION': '$XVID_VERSION', 'LIBXML2_VERSION': '$LIBXML2_VERSION', 'LIBBLURAY_VERSION': '$LIBBLURAY_VERSION', 'LIBZMQ_VERSION': '$LIBZMQ_VERSION', 'FREETYPE_SHA256SUM': '$FREETYPE_SHA256SUM', 'FRIBIDI_SHA256SUM': '$FRIBIDI_SHA256SUM', 'LIBASS_SHA256SUM': '$LIBASS_SHA256SUM', 'LIBVIDSTAB_SHA256SUM': '$LIBVIDSTAB_SHA256SUM', 'OGG_SHA256SUM': '$OGG_SHA256SUM', 'OPUS_SHA256SUM': '$OPUS_SHA256SUM', 'THEORA_SHA256SUM': '$THEORA_SHA256SUM', 'VORBIS_SHA256SUM': '$VORBIS_SHA256SUM', 'XVID_SHA256SUM': '$XVID_SHA256SUM', 'LIBXML2_SHA256SUM': '$LIBXML2_SHA256SUM', 'LIBBLURAY_SHA256SUM': '$LIBBLURAY_SHA256SUM', 'LIBZMQ_SHA256SUM': '$LIBZMQ_SHA256SUM'}, 'cache_from': ['roflcoopter/aarch64-ffmpeg:$FFMPEG_VERSION']}, 'image': 'roflcoopter/aarch64-ffmpeg:$FFMPEG_VERSION'}, 'aarch64-opencv': {'build': {'context': '..', 'dockerfile': './docker/aarch64/Dockerfile.opencv', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION'}, 'cache_from': ['roflcoopter/aarch64-opencv:$OPENCV_VERSION']}, 'image': 'roflcoopter/aarch64-opencv:$OPENCV_VERSION'}, 'aarch64-dlib': {'build': {'context': '..', 'dockerfile': './docker/aarch64/Dockerfile.dlib', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/aarch64-dlib:$DLIB_VERSION']}, 'image': 'roflcoopter/aarch64-dlib:$DLIB_VERSION'}, 'aarch64-wheels': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.wheels', 'args': {'ARCH': 'aarch64', 'BUILD_FROM': 'balenalib/aarch64-ubuntu:$UBUNTU_VERSION-build', 'DLIB_VERSION': '$DLIB_VERSION'}, 'cache_from': ['roflcoopter/aarch64-wheels:$WHEELS_VERSION']}, 'image': 'roflcoopter/aarch64-wheels:$WHEELS_VERSION'}, 'aarch64-base': {'build': {'context': '..', 'dockerfile': './docker/aarch64/Dockerfile.base', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION'}, 'cache_from': ['roflcoopter/aarch64-base:$BASE_VERSION']}, 'image': 'roflcoopter/aarch64-base:$BASE_VERSION'}, 'aarch64-viseron': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile', 'args': {'ARCH': 'aarch64', 'BASE_VERSION': '$BASE_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$FFMPEG_VERSION', 'WHEELS_VERSION': '$WHEELS_VERSION', 'S6_OVERLAY_ARCH': 'aarch64', 'S6_OVERLAY_VERSION': '$S6_OVERLAY_VERSION'}, 'cache_from': ['roflcoopter/aarch64-viseron:dev']}, 'image': 'roflcoopter/aarch64-viseron:dev'}, 'jetson-nano-python': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.python', 'args': {'UBUNTU_VERSION': 'bionic', 'PYTHON_VERSION': '$PYTHON_VERSION', 'PYTHON_PIP_VERSION': '$PYTHON_PIP_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-python:$PYTHON_VERSION']}, 'image': 'roflcoopter/jetson-nano-python:$PYTHON_VERSION'}, 'jetson-nano-ffmpeg': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.ffmpeg', 'args': {'UBUNTU_VERSION': 'bionic', 'MAKEFLAGS': '$MAKEFLAGS', 'FFMPEG_VERSION': '$JETSON_NANO_FFMPEG_VERSION', 'AOM_VERSION': '$AOM_VERSION', 'FDKAAC_VERSION': '$FDKAAC_VERSION', 'FONTCONFIG_VERSION': '$FONTCONFIG_VERSION', 'FREETYPE_VERSION': '$FREETYPE_VERSION', 'FRIBIDI_VERSION': '$FRIBIDI_VERSION', 'KVAZAAR_VERSION': '$KVAZAAR_VERSION', 'LAME_VERSION': '$LAME_VERSION', 'LIBASS_VERSION': '$LIBASS_VERSION', 'LIBPTHREAD_STUBS_VERSION': '$LIBPTHREAD_STUBS_VERSION', 'LIBVIDSTAB_VERSION': '$LIBVIDSTAB_VERSION', 'LIBXCB_VERSION': '$LIBXCB_VERSION', 'XCBPROTO_VERSION': '$XCBPROTO_VERSION', 'OGG_VERSION': '$OGG_VERSION', 'OPENCOREAMR_VERSION': '$OPENCOREAMR_VERSION', 'OPUS_VERSION': '$OPUS_VERSION', 'OPENJPEG_VERSION': '$OPENJPEG_VERSION', 'THEORA_VERSION': '$THEORA_VERSION', 'VORBIS_VERSION': '$VORBIS_VERSION', 'VPX_VERSION': '$VPX_VERSION', 'WEBP_VERSION': '$WEBP_VERSION', 'X264_VERSION': '$X264_VERSION', 'X265_VERSION': '$X265_VERSION', 'XAU_VERSION': '$XAU_VERSION', 'XORG_MACROS_VERSION': '$XORG_MACROS_VERSION', 'XPROTO_VERSION': '$XPROTO_VERSION', 'XVID_VERSION': '$XVID_VERSION', 'LIBXML2_VERSION': '$LIBXML2_VERSION', 'LIBBLURAY_VERSION': '$LIBBLURAY_VERSION', 'LIBZMQ_VERSION': '$LIBZMQ_VERSION', 'FREETYPE_SHA256SUM': '$FREETYPE_SHA256SUM', 'FRIBIDI_SHA256SUM': '$FRIBIDI_SHA256SUM', 'LIBASS_SHA256SUM': '$LIBASS_SHA256SUM', 'LIBVIDSTAB_SHA256SUM': '$LIBVIDSTAB_SHA256SUM', 'OGG_SHA256SUM': '$OGG_SHA256SUM', 'OPUS_SHA256SUM': '$OPUS_SHA256SUM', 'THEORA_SHA256SUM': '$THEORA_SHA256SUM', 'VORBIS_SHA256SUM': '$VORBIS_SHA256SUM', 'XVID_SHA256SUM': '$XVID_SHA256SUM', 'LIBXML2_SHA256SUM': '$LIBXML2_SHA256SUM', 'LIBBLURAY_SHA256SUM': '$LIBBLURAY_SHA256SUM', 'LIBZMQ_SHA256SUM': '$LIBZMQ_SHA256SUM', 'JETPACK_VERSION': '$JETPACK_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-ffmpeg:$JETSON_NANO_FFMPEG_VERSION']}, 'image': 'roflcoopter/jetson-nano-ffmpeg:$JETSON_NANO_FFMPEG_VERSION'}, 'jetson-nano-opencv': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.opencv', 'args': {'UBUNTU_VERSION': 'bionic', 'MAKEFLAGS': '-j7', 'PYTHON_VERSION': '$PYTHON_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$JETSON_NANO_FFMPEG_VERSION', 'JETPACK_VERSION': '$JETPACK_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-opencv:$OPENCV_VERSION']}, 'image': 'roflcoopter/jetson-nano-opencv:$OPENCV_VERSION'}, 'jetson-nano-dlib': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.dlib', 'args': {'UBUNTU_VERSION': 'bionic', 'PYTHON_VERSION': '$PYTHON_VERSION', 'MAKEFLAGS': '$MAKEFLAGS', 'DLIB_VERSION': '$DLIB_VERSION', 'JETPACK_VERSION': '$JETPACK_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-dlib:$DLIB_VERSION']}, 'image': 'roflcoopter/jetson-nano-dlib:$DLIB_VERSION'}, 'jetson-nano-wheels': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.wheels', 'args': {'ARCH': 'jetson-nano', 'DLIB_VERSION': '$DLIB_VERSION', 'UBUNTU_VERSION': 'bionic', 'PYTHON_VERSION': '$PYTHON_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-wheels:$WHEELS_VERSION']}, 'image': 'roflcoopter/jetson-nano-wheels:$WHEELS_VERSION'}, 'jetson-nano-base': {'build': {'context': '..', 'dockerfile': './docker/jetson-nano/Dockerfile.base', 'args': {'UBUNTU_VERSION': 'bionic', 'PYTHON_VERSION': '$PYTHON_VERSION', 'JETPACK_VERSION': '$JETPACK_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-base:$BASE_VERSION']}, 'image': 'roflcoopter/jetson-nano-base:$BASE_VERSION'}, 'jetson-nano-viseron': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile', 'args': {'ARCH': 'jetson-nano', 'BASE_VERSION': '$BASE_VERSION', 'OPENCV_VERSION': '$OPENCV_VERSION', 'FFMPEG_VERSION': '$JETSON_NANO_FFMPEG_VERSION', 'WHEELS_VERSION': '$WHEELS_VERSION', 'S6_OVERLAY_ARCH': 'aarch64', 'S6_OVERLAY_VERSION': '$S6_OVERLAY_VERSION'}, 'cache_from': ['roflcoopter/jetson-nano-viseron:dev']}, 'image': 'roflcoopter/jetson-nano-viseron:dev'}, 'models': {'build': {'context': '..', 'dockerfile': './docker/Dockerfile.models', 'args': {'UBUNTU_VERSION': '$UBUNTU_VERSION'}, 'cache_from': ['roflcoopter/viseron-models:latest']}, 'image': 'roflcoopter/viseron-models:latest'}}}"
NRCan/geo-deep-learning,latest,/docker-compose.yml,"{'version': '3', 'services': {'geo-deep-learning': {'build': '.', 'environment': ['PYTHONPATH=.'], 'volumes': ['.:/app'], 'entrypoint': 'python', 'command': '--version'}}}"
neuralet/smart-social-distancing,latest,/docker-compose-coral-dev.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-coral-dev-board', 'privileged': True, 'build': {'context': '.', 'dockerfile': 'coral-dev-board.Dockerfile'}}}}"
neuralet/smart-social-distancing,latest,/docker-compose-x86-openvino.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-x86_64_openvino', 'build': {'context': '.', 'dockerfile': 'x86-openvino.Dockerfile'}}}}"
neuralet/smart-social-distancing,latest,/docker-compose-gpu.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-x86_64_gpu', 'build': {'context': '.', 'dockerfile': 'x86-gpu.Dockerfile'}, 'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}}}}"
neuralet/smart-social-distancing,latest,/docker-compose-jetson-tx2.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-jetson-nano', 'privileged': True, 'build': {'context': '.', 'dockerfile': 'jetson-tx2.Dockerfile'}, 'runtime': 'nvidia', 'environment': ['NVIDIA_VISIBLE_DEVICES=all']}}}"
neuralet/smart-social-distancing,latest,/docker-compose.yml,"{'services': {'processor': {'volumes': ['.:/repo'], 'ports': ['8300:8000']}}}"
neuralet/smart-social-distancing,latest,/docker-compose-jetson-nano.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-jetson-nano', 'privileged': True, 'build': {'context': '.', 'dockerfile': 'jetson-nano.Dockerfile'}, 'runtime': 'nvidia', 'environment': ['NVIDIA_VISIBLE_DEVICES=all']}}}"
neuralet/smart-social-distancing,latest,/docker-compose-gpu-tensorrt.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-x86_64_gpu_tensorrt', 'build': {'context': '.', 'dockerfile': 'x86-gpu-tensorrt-openpifpaf.Dockerfile'}, 'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}}}}"
neuralet/smart-social-distancing,latest,/docker-compose-amd64.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-amd64', 'privileged': True, 'build': {'context': '.', 'dockerfile': 'amd64-usbtpu.Dockerfile'}}}}"
neuralet/smart-social-distancing,latest,/docker-compose-x86.yml,"{'services': {'processor': {'image': 'neuralet/smart-social-distancing:latest-x86_64', 'build': {'context': '.', 'dockerfile': 'x86.Dockerfile'}}}}"
blakeblackshear/frigate-hass-integration,latest,/docker-compose.yml,"{'version': '3', 'services': {'dev': {'container_name': 'dev', 'user': 'vscode', 'build': {'context': '.', 'dockerfile': 'docker/Dockerfile.dev'}, 'volumes': ['/etc/localtime:/etc/localtime:ro', '.:/workspace:cached'], 'command': '/bin/sh -c ""while sleep 1000; do :; done""'}, 'hass': {'container_name': 'hass', 'image': 'homeassistant/home-assistant:beta', 'ports': ['8123:8123'], 'volumes': ['/etc/localtime:/etc/localtime:ro', '.devcontainer/configuration.yaml:/config/configuration.yaml:ro', './custom_components:/config/custom_components:ro']}, 'frigate': {'container_name': 'frigate', 'privileged': True, 'image': 'blakeblackshear/frigate:stable-amd64', 'devices': ['/dev/bus/usb:/dev/bus/usb', '/dev/dri:/dev/dri'], 'volumes': ['/etc/localtime:/etc/localtime:ro', '.devcontainer/frigate.yml:/config/config.yml:ro', './frigate:/media/frigate'], 'ports': ['5000:5000', '1935:1935']}, 'mqtt': {'container_name': 'mqtt', 'image': 'eclipse-mosquitto:1.6', 'ports': ['1883:1883']}}}"
sacdallago/bio_embeddings,latest,/webserver/docker-compose.dev.yml,"{'version': '3.2', 'services': {'bio_embeddings_worker': {'image': 'ghcr.io/bioembeddings/worker', 'build': {'context': '..', 'dockerfile': 'webserver/Dockerfile.worker', 'cache_from': ['ghcr.io/bioembeddings/worker']}, 'container_name': 'bio_embeddings_worker', 'volumes': ['${HOME}/.cache/bio_embeddings:/mnt/models', '../bio_embeddings:/app/bio_embeddings', '../webserver:/app/webserver'], 'environment': {'CELERY_BROKER_URL': 'amqp://rabbitmq', 'MONGO_URL': 'mongodb://root:example@mongo:27017', 'CELERY_WORKER_TYPE': 'pipeline,seqvec,seqvec_annotations,protbert,seqvec_annotations,protbert_annotations'}, 'networks': ['bio_embeddings']}, 'bio_embeddings_webserver': {'image': 'ghcr.io/bioembeddings/webserver', 'build': {'context': '..', 'dockerfile': 'webserver/Dockerfile.webserver', 'cache_from': ['ghcr.io/bioembeddings/webserver']}, 'container_name': 'bio_embeddings_webserver', 'ports': ['3000:3000'], 'volumes': ['../webserver:/app/webserver'], 'environment': {'CELERY_BROKER_URL': 'amqp://rabbitmq', 'MONGO_URL': 'mongodb://root:example@mongo:27017'}, 'networks': ['bio_embeddings']}, 'nginx': {'image': 'nginx:1-alpine', 'container_name': 'nginx', 'ports': ['443:443'], 'volumes': ['.:/mnt', './dev/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro'], 'networks': ['bio_embeddings']}, 'mongo': {'image': 'mongo:4', 'container_name': 'mongo', 'ports': ['27017:27017'], 'environment': {'MONGO_INITDB_ROOT_USERNAME': 'root', 'MONGO_INITDB_ROOT_PASSWORD': 'example'}, 'networks': ['bio_embeddings']}, 'rabbitmq': {'image': 'rabbitmq:3-alpine', 'hostname': 'bio_embeddings_host', 'container_name': 'rabbitmq', 'ports': ['5672:5672'], 'networks': ['bio_embeddings']}}, 'networks': {'bio_embeddings': None}}"
sacdallago/bio_embeddings,latest,/webserver/docker-compose.prod.yml,"{'version': '3.1', 'services': {'mongo': {'image': 'mongo:4', 'container_name': 'mongo', 'environment': {'MONGO_INITDB_ROOT_USERNAME': 'REPLACE_ME', 'MONGO_INITDB_ROOT_PASSWORD': 'REPLACE_ME'}, 'networks': ['bio_embeddings']}, 'rabbitmq': {'image': 'rabbitmq:3-alpine', 'hostname': 'bio_embeddings_host', 'container_name': 'rabbitmq', 'networks': ['bio_embeddings']}, 'bio_embeddings_worker': {'image': 'ghcr.io/bioembeddings/worker', 'container_name': 'bio_embeddings_worker', 'volumes': ['/replace/me/with/a/path/to/the/model/directory:/mnt/models'], 'environment': {'CELERY_BROKER_URL': 'amqp://rabbitmq', 'MONGO_URL': 'mongodb://REPLACE_ME:REPLACE_ME@mongo:27017'}, 'networks': ['bio_embeddings']}, 'bio_embeddings_webserver': {'image': 'ghcr.io/bioembeddings/webserver', 'container_name': 'bio_embeddings_webserver', 'ports': ['3000:3000'], 'environment': {'CELERY_BROKER_URL': 'amqp://rabbitmq', 'MONGO_URL': 'mongodb://REPLACE_ME:REPLACE_ME@mongo:27017'}, 'networks': ['bio_embeddings']}}, 'networks': {'bio_embeddings': None}}"
xaynetwork/xaynet,latest,/docker/docker-compose.yml,"{'version': '3.8', 'services': {'coordinator': {'image': 'xaynetwork/xaynet:development', 'build': {'context': '..', 'dockerfile': 'docker/Dockerfile'}, 'depends_on': ['minio', 'redis', 'influxdb'], 'volumes': ['${PWD}/configs/docker-dev.toml:/app/config.toml'], 'networks': ['xaynet'], 'ports': ['8081:8081'], 'restart': 'unless-stopped'}, 'influxdb': {'image': 'influxdb:1.8', 'hostname': 'influxdb', 'container_name': 'influxdb', 'environment': {'INFLUXDB_DB': 'metrics', 'INFLUXDB_DATA_QUERY_LOG_ENABLED': 'false', 'INFLUXDB_HTTP_LOG_ENABLED': 'false'}, 'volumes': ['influxdb-data:/var/lib/influxdb'], 'networks': ['xaynet'], 'ports': ['8086:8086']}, 'minio': {'image': 'minio/minio', 'hostname': 'minio', 'container_name': 'minio', 'env_file': ['.dev.env'], 'command': 'server /data', 'volumes': ['minio-data:/data'], 'networks': ['xaynet'], 'ports': ['9000:9000']}, 'redis': {'image': 'redis:6', 'hostname': 'redis', 'container_name': 'redis', 'entrypoint': '/usr/local/bin/redis-server --appendonly yes --appendfsync everysec', 'volumes': ['redis-data:/data'], 'networks': ['xaynet'], 'ports': ['6379:6379']}}, 'volumes': {'minio-data': None, 'redis-data': None, 'influxdb-data': None}, 'networks': {'xaynet': None}}"
robotology/gym-ignition,latest,/.docker/docker-compose.yml,"{'version': '3.0', 'services': {'base': {'build': {'args': {'from': 'ubuntu:focal'}, 'context': '.', 'dockerfile': 'base.Dockerfile'}, 'image': 'diegoferigo/gym-ignition:base'}, 'ci-master': {'build': {'args': {'from': 'diegoferigo/gym-ignition:base', 'ignition_codename': 'dome'}, 'context': '.', 'dockerfile': 'cicd-master.Dockerfile'}, 'image': 'diegoferigo/gym-ignition:ci-master'}, 'pypi-master': {'build': {'args': {'from': 'diegoferigo/gym-ignition:base', 'ignition_codename': 'dome'}, 'context': '.', 'dockerfile': 'cicd-master.Dockerfile'}, 'image': 'diegoferigo/gym-ignition:pypi-master'}, 'ci-devel': {'build': {'args': {'from': 'diegoferigo/gym-ignition:base', 'ignition_codename': 'fortress', 'CMAKE_BUILD_TYPE': 'Debug'}, 'context': '.', 'dockerfile': 'cicd-devel.Dockerfile'}, 'image': 'diegoferigo/gym-ignition:ci-devel'}, 'pypi-devel': {'build': {'args': {'from': 'diegoferigo/gym-ignition:base', 'ignition_codename': 'fortress', 'CMAKE_BUILD_TYPE': 'Release'}, 'context': '.', 'dockerfile': 'cicd-devel.Dockerfile'}, 'image': 'diegoferigo/gym-ignition:pypi-devel'}, 'latest': {'build': {'args': {'from': 'diegoferigo/gym-ignition:pypi-master', 'branch': 'master'}, 'context': '.', 'dockerfile': 'Dockerfile'}, 'image': 'diegoferigo/gym-ignition:latest'}, 'nightly': {'build': {'args': {'from': 'diegoferigo/gym-ignition:ci-devel', 'branch': 'devel', 'pip_options': '--pre'}, 'context': '.', 'dockerfile': 'Dockerfile'}, 'image': 'diegoferigo/gym-ignition:nightly'}}}"
learningOrchestra/learningOrchestra,latest,/docker-compose.yml,"{'version': '3.8', 'x-deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}}, 'x-deploy-manager': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'x-deploy-worker': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'x-service-database-env': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database'], 'services': {'databaseapi': {'build': 'microservices/database_api_image', 'image': '127.0.0.1:5050/database_api', 'ports': ['5000:5000'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'volumes': ['database_api:/datasets'], 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'databaseprimary': {'image': 'bitnami/mongodb:3.6.17-ol-7-r26', 'ports': ['27017:27017'], 'environment': ['MONGODB_ROOT_PASSWORD=owl45#21', 'MONGODB_ADVERTISED_HOSTNAME=databaseprimary', 'MONGODB_REPLICA_SET_MODE=primary', 'MONGODB_REPLICA_SET_KEY=replicasetkey', 'MONGODB_REPLICA_SET_NAME=replica_set'], 'volumes': ['database:/bitnami'], 'networks': ['database'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}}, 'databasesecondary': {'image': 'bitnami/mongodb:3.6.17-ol-7-r26', 'depends_on': ['databaseprimary'], 'environment': ['MONGODB_PRIMARY_HOST=databaseprimary', 'MONGODB_PRIMARY_PORT_NUMBER=27017', 'MONGODB_PRIMARY_ROOT_PASSWORD=owl45#21', 'MONGODB_ADVERTISED_HOSTNAME=databasesecondary', 'MONGODB_REPLICA_SET_NAME=replica_set', 'MONGODB_REPLICA_SET_KEY=replicasetkey', 'MONGODB_REPLICA_SET_MODE=secondary'], 'networks': ['database'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}}, 'databasearbiter': {'image': 'bitnami/mongodb:3.6.17-ol-7-r26', 'depends_on': ['databaseprimary'], 'environment': ['MONGODB_PRIMARY_HOST=databaseprimary', 'MONGODB_PRIMARY_PORT_NUMBER=27017', 'MONGODB_PRIMARY_ROOT_PASSWORD=owl45#21', 'MONGODB_ADVERTISED_HOSTNAME=databasearbiter', 'MONGODB_REPLICA_SET_KEY=replicasetkey', 'MONGODB_REPLICA_SET_NAME=replica_set', 'MONGODB_REPLICA_SET_MODE=arbiter'], 'networks': ['database'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}}, 'images': {'image': 'registry:2.7.1', 'ports': ['5050:5000'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'networks': ['database'], 'volumes': ['images:/var/lib/registry']}, 'agent': {'image': 'portainer/agent:linux-amd64-2.1.0-alpine', 'volumes': ['/var/run/docker.sock:/var/run/docker.sock', '/var/lib/docker/volumes:/var/lib/docker/volumes'], 'networks': ['portainer'], 'deploy': {'mode': 'global', 'placement': {'constraints': ['node.platform.os==linux']}}}, 'portainer': {'image': 'portainer/portainer-ce:2.1.1-alpine', 'command': '-H tcp://tasks.agent:9001 --tlsskipverify', 'ports': ['9000:9000', '8000:8000'], 'volumes': ['portainer:/data'], 'networks': ['portainer'], 'deploy': {'mode': 'replicated', 'replicas': 1, 'placement': {'constraints': ['node.role==manager']}}}, 'sparkmaster': {'build': 'microservices/spark_image', 'image': '127.0.0.1:5050/spark', 'ports': ['4040:4040', '7077:7077', '8080:8080'], 'environment': ['SPARK_ROLE=master'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['spark', 'database']}, 'sparkworker': {'image': '127.0.0.1:5050/spark', 'entrypoint': 'dockerize -wait tcp://sparkmaster:7077 -timeout 240s /sbin/my_init', 'ports': ['8081:8081', '41352:41352'], 'links': ['sparkmaster'], 'environment': ['SPARK_MASTER=sparkmaster', 'SPARK_ROLE=slave'], 'deploy': {'replicas': 3, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['spark', 'database']}, 'projection': {'build': 'microservices/projection_image', 'image': '127.0.0.1:5050/projection', 'ports': ['5001:5001', '41000:41000'], 'extra_hosts': ['projection:0.0.0.0'], 'depends_on': ['databaseprimary', 'images', 'sparkmaster', 'sparkworker'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['database', 'spark'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'builder': {'build': 'microservices/builder_image', 'image': '127.0.0.1:5050/builder', 'ports': ['5002:5002', '41100:41100'], 'extra_hosts': ['builder:0.0.0.0'], 'depends_on': ['databaseprimary', 'images', 'sparkmaster', 'sparkworker'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['database', 'spark'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'datatypehandler': {'build': 'microservices/data_type_handler_image', 'image': '127.0.0.1:5050/data_type_handler', 'ports': ['5003:5003'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'histogram': {'build': 'microservices/histogram_image', 'image': '127.0.0.1:5050/histogram', 'ports': ['5004:5004'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==worker']}}, 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'databasexecutor': {'build': 'microservices/database_executor_image', 'image': '127.0.0.1:5050/database_executor', 'ports': ['5006:5006'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'volumes': ['database_executor:/explore', 'database_executor:/transform', 'model:/models', 'binary_executor:/binaries', 'code_executor:/code_executions'], 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}, 'gatewayapi': {'image': 'devopsfaith/krakend:1.2.0', 'volumes': ['./microservices/krakend:/etc/krakend'], 'ports': ['80:8080', '8090:8090'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'networks': ['database', 'spark']}, 'model': {'build': 'microservices/model_image', 'image': '127.0.0.1:5050/model', 'ports': ['5007:5007'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database'], 'volumes': ['code_executor:/code_executions', 'database_executor:/explore', 'database_executor:/transform', 'model:/models', 'binary_executor:/binaries']}, 'binaryexecutor': {'build': 'microservices/binary_executor_image', 'image': '127.0.0.1:5050/binary_executor', 'ports': ['5008:5008'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database'], 'volumes': ['model:/models', 'binary_executor:/binaries', 'database_executor:/transform', 'code_executor:/code_executions']}, 'codexecutor': {'build': 'microservices/code_executor_image', 'image': '127.0.0.1:5050/code_executor', 'ports': ['5009:5009'], 'depends_on': ['databaseprimary', 'images'], 'deploy': {'replicas': 1, 'restart_policy': {'condition': 'on-failure'}, 'placement': {'constraints': ['node.role==manager']}}, 'volumes': ['code_executor:/code_executions', 'database_executor:/explore', 'database_executor:/transform', 'model:/models', 'binary_executor:/binaries', 'database_api:/datasets'], 'networks': ['database'], 'environment': ['DATABASE_URL=mongodb://root:owl45#21@databaseprimary,databasesecondary', 'DATABASE_PORT=27017', 'DATABASE_REPLICA_SET=replica_set', 'DATABASE_NAME=database']}}, 'networks': {'database': None, 'spark': None, 'portainer': None}, 'volumes': {'images': None, 'database': None, 'database_api': None, 'database_executor': None, 'code_executor': None, 'model': None, 'binary_executor': None, 'portainer': None}}"
CogStack/MedCATtrainer,latest,/docker-compose-fimg.yml,"{'version': '3.4', 'services': {'medcattrainer': {'container_name': 'medcattrainer', 'hostname': 'medcat', 'restart': 'always', 'image': 'medcattrainer_medcattrainer', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env'], 'command': '/home/run.sh'}, 'nginx': {'container_name': 'medcattrainer_nginx', 'restart': 'always', 'image': 'medcattrainer_nginx', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
CogStack/MedCATtrainer,latest,/docker-compose-prod.yml,"{'version': '3.4', 'services': {'medcattrainer': {'container_name': 'medcattrainer', 'hostname': 'medcat', 'restart': 'always', 'image': 'cogstacksystems/medcat-trainer:v2.2.0', 'volumes': ['./configs:/home/configs', 'api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env-prod'], 'command': '/home/run.sh'}, 'nginx': {'container_name': 'medcattrainer_nginx', 'image': 'cogstacksystems/medcat-trainer-nginx:v2.2.0', 'restart': 'always', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
CogStack/MedCATtrainer,latest,/docker-compose-latest.yml,"{'version': '3.4', 'services': {'medcattrainer': {'container_name': 'medcattrainer', 'hostname': 'medcat', 'restart': 'always', 'image': 'cogstacksystems/medcat-trainer:latest', 'volumes': ['./configs:/home/configs', 'api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env'], 'command': '/home/run.sh'}, 'nginx': {'container_name': 'medcattrainer_nginx', 'image': 'cogstacksystems/medcat-trainer-nginx:latest', 'restart': 'always', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
CogStack/MedCATtrainer,latest,/docker-compose.yml,"{'version': '3.4', 'services': {'medcattrainer': {'container_name': 'medcattrainer', 'hostname': 'medcat', 'restart': 'always', 'image': 'cogstacksystems/medcat-trainer:v2.2.1', 'volumes': ['./configs:/home/configs', 'api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env'], 'command': '/home/run.sh'}, 'nginx': {'container_name': 'medcattrainer_nginx', 'image': 'cogstacksystems/medcat-trainer-nginx:v2.2.1', 'restart': 'always', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
CogStack/MedCATtrainer,latest,/docker-compose-dev.yml,"{'version': '3.4', 'services': {'medcattrainer': {'image': 'medcattrainer:latest', 'build': {'network': 'host', 'context': './webapp'}, 'volumes': ['./webapp/api/core:/home/api/core', './webapp/api/api:/home/api/api', './webapp/run.sh:/home/run.sh', './configs:/home/configs', 'api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env'], 'command': '/home/run.sh'}, 'nginx': {'image': 'medcattrainer-nginx:latest', 'build': {'network': 'host', 'context': './nginx'}, 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
CogStack/MedCATtrainer,latest,/docker-compose-mc0x.yml,"{'version': '3.4', 'services': {'medcattrainer': {'container_name': 'medcattrainer', 'hostname': 'medcat', 'restart': 'always', 'image': 'cogstacksystems/medcat-trainer:mc-v0.x-latest', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static', 'api-db:/home/api/db'], 'expose': ['8000'], 'env_file': ['./envs/env-mc0x'], 'command': '/home/run.sh'}, 'nginx': {'container_name': 'medcattrainer_nginx', 'image': 'cogstacksystems/medcat-trainer-nginx:mc-v0.x-latest', 'restart': 'always', 'volumes': ['api-media:/home/api/media', 'api-static:/home/api/static'], 'ports': ['${MCTRAINER_PORT:-8001}:8000'], 'depends_on': ['medcattrainer']}}, 'volumes': {'api-media': None, 'api-static': None, 'api-db': None}}"
ModelChimp/modelchimp,latest,/docker-compose.local.yml,"{'version': '3', 'services': {'nginx': {'image': 'nginx:latest', 'container_name': 'production_nginx', 'volumes': ['./nginx-dev.conf:/etc/nginx/nginx.conf'], 'ports': ['8000:8000'], 'links': ['web', 'ui', 'socket']}, 'redis': {'image': 'redis', 'ports': ['6379:6379']}, 'web': {'image': 'modelchimp/modelchimp-server:latest', 'container_name': 'web', 'restart': 'always', 'command': ['bash', './scripts/wait-for-postgres.sh', 'db', 'bash', 'runserver.sh'], 'ports': ['8002:8002'], 'links': ['redis', 'db'], 'volumes': ['./.env:/code/.env']}, 'socket': {'image': 'modelchimp/modelchimp-server:latest', 'restart': 'always', 'command': ['daphne', '-b', '0.0.0.0', '-p', '8001', 'settings.asgi:application'], 'ports': ['8001:8001'], 'links': ['redis', 'db'], 'volumes': ['./.env:/code/.env']}, 'celery': {'image': 'modelchimp/modelchimp-server:latest', 'command': 'bash ./scripts/wait-for-postgres.sh db celery -A settings worker -l info -B', 'links': ['redis', 'db'], 'volumes': ['./.env:/code/.env']}, 'ui': {'image': 'modelchimp/modelchimp-ui:latest', 'command': 'npm run start:prod', 'ports': ['3000:3000']}, 'db': {'image': 'postgres:10.6', 'restart': 'always', 'volumes': ['./postgres-data:/var/lib/postgresql/data'], 'ports': ['5432:5432']}}}"
ModelChimp/modelchimp,latest,/docker-compose.dev.yml,"{'version': '3', 'services': {'db': {'image': 'postgres:10.6', 'restart': 'always', 'ports': ['5432:5432']}, 'redis': {'image': 'redis', 'ports': ['6379:6379']}, 'web': {'build': '.', 'container_name': 'web', 'restart': 'always', 'command': ['bash', './scripts/wait-for-postgres.sh', 'db', 'bash', 'runserver_dev.sh'], 'volumes': ['.:/code', '.env:/code/.env'], 'ports': ['8000:8000'], 'depends_on': ['db', 'redis']}, 'celery': {'build': '.', 'command': 'bash ./scripts/wait-for-postgres.sh db celery -A settings worker -l info -B', 'volumes': ['.:/code', '.env:/code/.env'], 'depends_on': ['db', 'redis', 'web']}}}"
ModelChimp/modelchimp,latest,/docker-compose.prod.yml,"{'version': '3', 'services': {'nginx': {'image': 'nginx:latest', 'container_name': 'production_nginx', 'volumes': ['/var/run/nginx.conf:/etc/nginx/nginx.conf'], 'ports': ['80:80', '443:443'], 'links': ['web', 'ui', 'socket'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'nginx'}}}, 'redis': {'image': 'redis', 'ports': ['6379:6379'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'redis'}}}, 'web': {'image': 'modelchimp/modelchimp-server:latest', 'restart': 'always', 'command': ['gunicorn', '--access-logfile', '-', '--workers', '3', '-b', '0.0.0.0:8002', 'settings.wsgi:application'], 'ports': ['8000:8000'], 'links': ['redis'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'web'}}, 'volumes': ['/var/run/.env:/code/.env']}, 'socket': {'image': 'modelchimp/modelchimp-server:latest', 'restart': 'always', 'command': ['daphne', '-b', '0.0.0.0', '-p', '8001', 'settings.asgi:application'], 'ports': ['8001:8001'], 'links': ['redis'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'web-socket'}}, 'volumes': ['/var/run/.env:/code/.env']}, 'celery': {'image': 'modelchimp/modelchimp-server:latest', 'command': 'celery -A settings worker -l info -B', 'links': ['redis'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'celery'}}, 'volumes': ['/var/run/.env:/code/.env']}, 'ui': {'image': 'modelchimp/modelchimp-ui:latest', 'command': 'npm run start:prod', 'ports': ['3000:3000'], 'logging': {'driver': 'awslogs', 'options': {'awslogs-group': 'modelchimp-cluster', 'awslogs-region': 'us-west-1', 'awslogs-stream-prefix': 'ui'}}}}}"
ModelChimp/modelchimp,latest,/.circleci/docker-compose.circle.yml,"{'version': '3', 'services': {'db': {'image': 'postgres:10.6', 'restart': 'always', 'volumes': ['./postgres-data:/var/lib/postgresql/data'], 'ports': ['5432:5432']}, 'redis': {'image': 'redis', 'ports': ['6379:6379']}, 'web': {'build': '../', 'container_name': 'web', 'restart': 'always', 'command': ['bash', './scripts/wait-for-postgres.sh', 'db', 'bash', './scripts/wait-for-ui.sh', 'bash', 'runserver.sh'], 'volumes': ['./.env-dev:/code/.env'], 'ports': ['8000:8000'], 'depends_on': ['db', 'redis']}, 'celery': {'build': '../', 'command': ['bash', './scripts/wait-for-postgres.sh', 'db', 'bash', './scripts/wait-for-ui.sh', 'celery', '-A', 'settings', 'worker', '-l', 'info', '-B'], 'volumes': ['./.env-dev:/code/.env'], 'depends_on': ['db', 'redis', 'web']}, 'ui': {'build': {'context': '../client', 'dockerfile': 'Dockerfile'}, 'command': 'npm run start:local', 'environment': ['NODE_ENV=development'], 'volumes': ['./client:/frontend', '/frontend/node_modules'], 'ports': ['3000:3000']}}}"
LLNL/merlin,latest,/docs/source/modules/installation/docker-compose_rabbit.yml,"{'version': '3', 'networks': {'mernet': {'driver': 'bridge'}}, 'services': {'redis': {'image': 'redis:latest', 'container_name': 'my-redis', 'ports': ['6379:6379'], 'networks': ['mernet']}, 'rabbitmq': {'image': 'rabbitmq:3-management', 'container_name': 'my-rabbit', 'tty': True, 'ports': ['15672:15672', '15671:15671', '5672:5672', '5671:5671'], 'environment': ['RABBITMQ_SSL_CACERTFILE=/cert_rabbitmq/ca_certificate.pem', 'RABBITMQ_SSL_KEYFILE=/cert_rabbitmq/server_key.pem', 'RABBITMQ_SSL_CERTFILE=/cert_rabbitmq/server_certificate.pem', 'RABBITMQ_SSL_VERIFY=verify_none', 'RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=false', 'RABBITMQ_DEFAULT_USER=merlinu', 'RABBITMQ_DEFAULT_VHOST=/merlinu', 'RABBITMQ_DEFAULT_PASS=guest'], 'volumes': ['~/merlinu/cert_rabbitmq:/cert_rabbitmq'], 'networks': ['mernet']}, 'merlin': {'image': 'llnl/merlin', 'container_name': 'my-merlin', 'tty': True, 'volumes': ['~/merlinu/:/home/merlinu'], 'networks': ['mernet']}}}"
LLNL/merlin,latest,/docs/source/modules/installation/docker-compose_rabbit_redis_tls.yml,"{'version': '3', 'networks': {'mernet': {'driver': 'bridge'}}, 'services': {'redis': {'image': 'redis:6.0-rc2', 'container_name': 'my-redis', 'command': ['--port 0', '--tls-port 6379', '--tls-ca-cert-file /cert_redis/ca_certificate.pem', '--tls-key-file /cert_redis/server_key.pem', '--tls-cert-file /cert_redis/server_certificate.pem', '--tls-auth-clients no'], 'ports': ['6379:6379'], 'volumes': ['~/merlinu/cert_redis:/cert_redis'], 'networks': ['mernet']}, 'rabbitmq': {'image': 'rabbitmq:3-management', 'container_name': 'my-rabbit', 'tty': True, 'ports': ['15672:15672', '15671:15671', '5672:5672', '5671:5671'], 'environment': ['RABBITMQ_SSL_CACERTFILE=/cert_rabbitmq/ca_certificate.pem', 'RABBITMQ_SSL_KEYFILE=/cert_rabbitmq/server_key.pem', 'RABBITMQ_SSL_CERTFILE=/cert_rabbitmq/server_certificate.pem', 'RABBITMQ_SSL_VERIFY=verify_none', 'RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=false', 'RABBITMQ_DEFAULT_USER=merlinu', 'RABBITMQ_DEFAULT_VHOST=/merlinu', 'RABBITMQ_DEFAULT_PASS=guest'], 'volumes': ['~/merlinu/cert_rabbitmq:/cert_rabbitmq'], 'networks': ['mernet']}, 'merlin': {'image': 'llnl/merlin', 'container_name': 'my-merlin', 'tty': True, 'volumes': ['~/merlinu/:/home/merlinu'], 'networks': ['mernet']}}}"
LLNL/merlin,latest,/docs/source/modules/installation/docker-compose.yml,"{'version': '3', 'networks': {'mernet': {'driver': 'bridge'}}, 'services': {'redis': {'image': 'redis:latest', 'container_name': 'my-redis', 'ports': ['6379:6379'], 'networks': ['mernet']}, 'merlin': {'image': 'llnl/merlin', 'container_name': 'my-merlin', 'tty': True, 'volumes': ['~/merlinu/:/home/merlinu'], 'networks': ['mernet']}}}"
Kitware/dive,latest,/docker-compose.override.yml,"{'version': '3.8', 'services': {'girder': {'volumes': ['./server:/opt/dive/src'], 'command': ['--dev']}, 'girder_worker_pipelines': {'volumes': ['./server:/opt/dive/src']}, 'girder_worker_training': {'volumes': ['./server:/opt/dive/src']}, 'girder_worker_default': {'volumes': ['./server:/opt/dive/src']}}}"
Kitware/dive,latest,/docker-compose.yml,"{'x-worker': {'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}, 'ipc': 'host', 'build': {'context': '.', 'dockerfile': 'docker/girder_worker.Dockerfile'}, 'image': 'kitware/viame-worker:${TAG:-latest}', 'volumes': ['addons:/tmp/addons:ro'], 'labels': ['com.centurylinklabs.watchtower.enable=true'], 'depends_on': {'girder': {'condition': 'service_started'}, 'rabbit': {'condition': 'service_started'}}}, 'version': '3.8', 'services': {'traefik': {'image': 'traefik:v2.4', 'container_name': 'traefik', 'command': '--providers.docker=true --providers.docker.exposedByDefault=false --entrypoints.web.address=:80\n', 'volumes': ['${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock'], 'ports': ['8010:80']}, 'rabbit': {'image': 'rabbitmq:3.8.14-management', 'ports': ['5672:5672', '15672:15672'], 'environment': ['RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}', 'RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}', 'RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST:-default}']}, 'mongo': {'image': 'mongo:5.0', 'volumes': ['mongo_db:/data/db']}, 'girder': {'build': {'context': '.', 'dockerfile': 'docker/girder.Dockerfile'}, 'image': 'kitware/viame-web:${TAG:-latest}', 'init': True, 'command': ['--mode', 'production'], 'depends_on': ['mongo', 'traefik'], 'volumes': ['girder_assetstore:/home/assetstore', {'type': 'bind', 'source': '${PUBLIC_DATA_PATH:-./docker/girder_data}', 'target': '/data/public', 'read_only': True, 'volume': {'nocopy': True}}], 'environment': ['GIRDER_MONGO_URI=mongodb://mongo:27017/girder', 'GIRDER_ADMIN_USER=${GIRDER_ADMIN_USER:-admin}', 'GIRDER_ADMIN_PASS=${GIRDER_ADMIN_PASS:-letmein}', 'CELERY_BROKER_URL=${CELERY_BROKER_URL:-amqp://guest:guest@rabbit/default}', 'RABBITMQ_MANAGEMENT_USERNAME=${RABBITMQ_MANAGEMENT_USERNAME:-guest}', 'RABBITMQ_MANAGEMENT_PASSWORD=${RABBITMQ_MANAGEMENT_PASSWORD:-guest}', 'RABBITMQ_MANAGEMENT_VHOST=${RABBITMQ_MANAGEMENT_VHOST:-default}', 'RABBITMQ_MANAGEMENT_URL=${RABBITMQ_MANAGEMENT_URL:-http://rabbit:15672/}', 'RABBITMQ_MANAGEMENT_BROKER_URL_TEMPLATE=${RABBITMQ_MANAGEMENT_BROKER_URL_TEMPLATE:-amqp://{}:{}@default}'], 'labels': ['com.centurylinklabs.watchtower.enable=true', 'traefik.enable=true', 'traefik.http.services.girder-svc.loadbalancer.server.port=8080', 'traefik.http.routers.girder-rtr.entrypoints=web', 'traefik.http.routers.girder-rtr.rule=HostRegexp(`{catchall:.*}`)']}, 'girder_worker_default': {'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}, 'ipc': 'host', 'build': {'context': '.', 'dockerfile': 'docker/girder_worker.Dockerfile'}, 'image': 'kitware/viame-worker:${TAG:-latest}', 'volumes': ['addons:/tmp/addons:rw'], 'labels': ['com.centurylinklabs.watchtower.enable=true'], 'depends_on': {'girder': {'condition': 'service_started'}, 'rabbit': {'condition': 'service_started'}}, 'environment': ['WORKER_WATCHING_QUEUES=celery', 'WORKER_CONCURRENCY=${DEFAULT_WORKER_CONCURRENCY:-3}', 'CELERY_BROKER_URL=${CELERY_BROKER_URL:-amqp://guest:guest@rabbit/default}']}, 'girder_worker_pipelines': {'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}, 'ipc': 'host', 'build': {'context': '.', 'dockerfile': 'docker/girder_worker.Dockerfile'}, 'image': 'kitware/viame-worker:${TAG:-latest}', 'volumes': ['addons:/tmp/addons:ro'], 'labels': ['com.centurylinklabs.watchtower.enable=true'], 'depends_on': {'girder': {'condition': 'service_started'}, 'rabbit': {'condition': 'service_started'}}, 'environment': ['WORKER_WATCHING_QUEUES=pipelines', 'WORKER_CONCURRENCY=${PIPELINE_WORKER_CONCURRENCY:-1}', 'WORKER_GPU_UUID=${PIPELINE_GPU_UUID}', 'CELERY_BROKER_URL=${CELERY_BROKER_URL:-amqp://guest:guest@rabbit/default}']}, 'girder_worker_training': {'deploy': {'resources': {'reservations': {'devices': [{'capabilities': ['gpu']}]}}}, 'ipc': 'host', 'build': {'context': '.', 'dockerfile': 'docker/girder_worker.Dockerfile'}, 'image': 'kitware/viame-worker:${TAG:-latest}', 'volumes': ['addons:/tmp/addons:ro'], 'labels': ['com.centurylinklabs.watchtower.enable=true'], 'depends_on': {'girder': {'condition': 'service_started'}, 'rabbit': {'condition': 'service_started'}}, 'environment': ['WORKER_WATCHING_QUEUES=training', 'WORKER_CONCURRENCY=${TRAINING_WORKER_CONCURRENCY:-1}', 'WORKER_GPU_UUID=${TRAINING_GPU_UUID}', 'CELERY_BROKER_URL=${CELERY_BROKER_URL:-amqp://guest:guest@rabbit/default}']}}, 'volumes': {'addons': None, 'mongo_db': None, 'girder_assetstore': None}}"
Kitware/dive,latest,/docker-compose.prod.yml,"{'version': '3.8', 'services': {'traefik': {'restart': 'always', 'command': '--log.level=${LOG_LEVEL:-DEBUG} --providers.docker=true --providers.docker.exposedByDefault=false --providers.file.filename=/var/traefik/dynamic.yml --entrypoints.web.address=:80 --entrypoints.websecure.address=:443 --entrypoints.websecure.http.tls.certresolver=myresolver --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL} --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json --certificatesresolvers.myresolver.acme.httpchallenge=true --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web --certificatesresolvers.myresolver.acme.caserver=${ACME_CA_SERVER:-https://acme-staging-v02.api.letsencrypt.org/directory}\n', 'labels': ['traefik.enable=true', 'traefik.http.routers.http-catchall.entrypoints=web', 'traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)', 'traefik.http.routers.http-catchall.middlewares=redirect-to-https-mddl@docker', 'traefik.http.middlewares.redirect-to-https-mddl.redirectscheme.scheme=https'], 'volumes': ['./docker/traefik/letsencrypt:/letsencrypt', './docker/dynamic.yml:/var/traefik/dynamic.yml:ro'], 'ports': ['80:80', '443:443']}, 'rabbit': {'restart': 'always'}, 'mongo': {'restart': 'always'}, 'girder': {'restart': 'always', 'environment': ['WORKER_API_URL=${WORKER_API_URL:-http://girder:8080/api/v1}'], 'labels': ['traefik.http.routers.girder-rtr.entrypoints=websecure', 'traefik.http.routers.girder-rtr.rule=Host(`${HOSTNAME}`)']}, 'girder_worker_default': {'restart': 'always'}, 'girder_worker_pipelines': {'restart': 'always'}, 'girder_worker_training': {'restart': 'always', 'environment': ['WORKER_WATCHING_QUEUES=training,pipelines']}, 'watchtower': {'image': 'containrrr/watchtower:latest', 'container_name': 'watchtower', 'restart': 'always', 'command': '--rolling-restart --schedule ""0 0 2 * * 4"" --label-enable\n', 'environment': ['TZ=${TIMEZONE:-America/New_York}'], 'volumes': ['/var/run/docker.sock:/var/run/docker.sock']}, 'duplicati': {'image': 'linuxserver/duplicati:latest', 'container_name': 'duplicati', 'restart': 'always', 'ports': ['8200:8200'], 'environment': ['TZ=${TIMEZONE:-America/New_York}', 'PUID=0', 'PGID=0'], 'volumes': ['/var/lib/docker/volumes:/source_volumes:ro', '/var/local/backups:/destination_backups:rw', '/var/local/backups/duplicati/config:/config:rw']}}}"
arangoml/arangopipe,latest,/arangopipe/arangopipe_frontend/docker-compose.yml,"{'version': '3', 'services': {'app': {'build': './app', 'environment': ['REACT_APP_PORT=3000'], 'expose': [3000], 'ports': ['3000:3000'], 'volumes': ['./app/src:/srv/app/arangoml-ui/src', './app/public:/srv/app/arangoml-ui/public'], 'command': 'npm run start'}}}"
bitnami/bitnami-docker-tensorflow-serving,latest,/docker-compose.yml,"{'version': '2', 'services': {'tensorflow-serving': {'image': 'docker.io/bitnami/tensorflow-serving:2', 'ports': ['8500:8500', '8501:8501'], 'volumes': ['tensorflow_serving_data:/bitnami', '/tmp/model-data:/bitnami/model-data']}}, 'volumes': {'tensorflow_serving_data': {'driver': 'local'}}}"
bitnami/bitnami-docker-tensorflow-serving,latest,/2/debian-9/docker-compose.yml,"{'version': '2', 'services': {'tensorflow-serving': {'image': 'bitnami/tensorflow-serving:2', 'ports': ['8500:8500', '8501:8501'], 'volumes': ['tensorflow_serving_data:/bitnami', '/tmp/model-data:/bitnami/model-data']}}, 'volumes': {'tensorflow_serving_data': {'driver': 'local'}}}"
bitnami/bitnami-docker-tensorflow-serving,latest,/2/debian-10/docker-compose.yml,"{'version': '2', 'services': {'tensorflow-serving': {'image': 'docker.io/bitnami/tensorflow-serving:2', 'ports': ['8500:8500', '8501:8501'], 'volumes': ['tensorflow_serving_data:/bitnami', '/tmp/model-data:/bitnami/model-data']}}, 'volumes': {'tensorflow_serving_data': {'driver': 'local'}}}"
augerai/a2ml,latest,/docker-compose.task.yml,"{'version': '3', 'services': {'a2ml': {'build': '.', 'image': 'augerai/a2ml', 'working_dir': '/app', 'command': 'pytest -vv -s -o log_cli=True -o log_cli_level=info -W ignore tests/test_celery_tasks/test_tasks.py::TestTasks::test_train_server', 'env_file': ['develop.env', 'develop.client.env'], 'volumes': ['.:/app'], 'depends_on': ['a2ml-worker', 'a2ml-server']}, 'a2ml-worker': {'build': '.', 'image': 'augerai/a2ml', 'command': 'a2ml worker', 'env_file': 'develop.env', 'volumes': ['.:/app'], 'depends_on': ['minio', 'redis']}, 'a2ml-server': {'build': '.', 'image': 'augerai/a2ml', 'command': 'a2ml server', 'env_file': 'develop.env', 'volumes': ['.:/app'], 'depends_on': ['minio', 'redis'], 'ports': ['8000:8000']}, 'minio': {'image': 'minio/minio:RELEASE.2019-10-12T01-39-57Z', 'command': 'server --compat /data', 'ports': ['9000:9000'], 'volumes': ['./tmp/data/:/data/'], 'env_file': 'develop.env'}, 'redis': {'image': 'redis:alpine', 'volumes': ['redis_data:/data'], 'command': 'redis-server --save """" --appendonly no'}}, 'volumes': {'redis_data': None}}"
augerai/a2ml,latest,/docker-compose.yml,"{'version': '3', 'services': {'a2ml': {'build': '.', 'image': 'augerai/a2ml', 'command': 'a2ml server', 'env_file': 'develop.env', 'ports': ['8000:8000'], 'volumes': ['.:/app'], 'depends_on': ['minio', 'redis']}, 'worker': {'build': '.', 'image': 'augerai/a2ml', 'command': 'a2ml worker', 'env_file': 'develop.env', 'volumes': ['.:/app'], 'depends_on': ['minio', 'redis']}, 'minio': {'image': 'minio/minio:RELEASE.2020-03-14T02-21-58Z', 'command': 'server --compat /data', 'ports': ['9000:9000'], 'volumes': ['./tmp/docker/data/:/data/'], 'env_file': 'develop.env'}, 'redis': {'image': 'redis', 'ports': [6379]}}}"
augerai/a2ml,latest,/docker-compose.test.yml,"{'version': '3', 'services': {'a2ml': {'image': 'augerai/a2ml:latest', 'command': 'python -m py.test tests', 'env_file': 'develop.env', 'depends_on': ['createbucket', 'minio', 'redis']}, 'minio': {'image': 'minio/minio:RELEASE.2020-03-14T02-21-58Z', 'command': 'server --compat /data', 'ports': ['9000:9000'], 'env_file': 'develop.env'}, 'createbucket': {'build': {'context': '.', 'dockerfile': 'tests/minio_bootstrapper/Dockerfile'}, 'image': 'minio-bootstrapper', 'env_file': 'develop.env', 'entrypoint': '/bin/sh -c "" wget http://minio:9000/minio/health/ready; until /usr/bin/mc config host add myminio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY}; do sleep 0.5; done; /usr/bin/mc rm -r --force myminio/sample-bucket; /usr/bin/mc mb myminio/sample-bucket; /usr/bin/mc policy set upload myminio/sample-bucket; /usr/bin/mc cp /data/iris.csv myminio/sample-bucket/workspace/projects/a2ml-app/files/; /usr/bin/mc cp /data/iris_for_predict.csv myminio/sample-bucket/workspace/projects/a2ml-app/files/; ""\n', 'depends_on': ['minio']}, 'redis': {'image': 'redis', 'ports': [6379]}}}"
omegaml/omegaml,latest,/docker-compose.yml,"{'version': '3', 'services': {'omegaml': {'image': 'omegaml/omegaml:latest', 'hostname': 'omegaml', 'ports': ['5000:5000', '8899:8899'], 'links': ['rabbitmq', 'mongodb'], 'working_dir': '/app', 'command': 'honcho start restapi notebook', 'environment': ['APP=omegaml', 'OMEGA_MONGO_URL=mongodb://admin:foobar@mongodb/omega', 'OMEGA_BROKER=amqp://rabbitmq:5672//', 'OMEGA_FRAMEWORKS=scikit-learn,keras,tensorflow', 'JUPYTER_PASSWORD=sha1:24fa20fec60f:c7cd7e46afa507d484c59abeadbefa05022583b8', 'JUPYTER_PORT=8899', 'PYTHONPATH=/app/pylib', 'OMEGA_CONFIG_FILE=/app/config.yml', 'PYTHONUNBUFFERED=1', 'JUPYTER_ENABLE_LAB=yes', 'RESTARTABLE=yes'], 'volumes': ['pythonlib:/app/pylib']}, 'jyhub': {'image': 'omegaml/omegaml:latest', 'user': 'root', 'hostname': 'jyhub', 'ports': ['8000:8000', '8050-8060:8050-8060'], 'links': ['omegaml', 'rabbitmq', 'mongodb'], 'working_dir': '/app', 'command': 'honcho start jupyterhub', 'environment': ['APP=omegaml', 'OMEGA_MONGO_URL=mongodb://admin:foobar@mongodb/omega', 'OMEGA_BROKER=amqp://rabbitmq:5672//', 'OMEGA_FRAMEWORKS=scikit-learn,keras,tensorflow', 'JUPYTER_PASSWORD=sha1:24fa20fec60f:c7cd7e46afa507d484c59abeadbefa05022583b8', 'PYTHONPATH=/app/pylib', 'OMEGA_CONFIG_FILE=/app/config.yml', 'JY_HUB_VERSION=1.0.0', 'PYTHONUNBUFFERED=1'], 'volumes': ['pythonlib:/app/pylib']}, 'worker': {'image': 'omegaml/omegaml:latest', 'hostname': 'worker', 'links': ['rabbitmq', 'mongodb'], 'working_dir': '/app', 'command': 'honcho start worker scheduler', 'environment': ['OMEGA_MONGO_URL=mongodb://admin:foobar@mongodb/omega', 'OMEGA_BROKER=amqp://rabbitmq:5672//', 'OMEGA_FRAMEWORKS=scikit-learn,keras,tensorflow', 'C_FORCE_ROOT=yes', 'OMEGA_CONFIG_FILE=/app/config.yml', 'PYTHONPATH=/app/pylib', 'PYTHONUNBUFFERED=1'], 'volumes': ['pythonlib:/app/pylib']}, 'rabbitmq': {'image': 'rabbitmq:3.7.17', 'hostname': 'rabbitmq', 'ports': ['5672:5672']}, 'mongodb': {'image': 'mongo:3.6.8-stretch', 'hostname': 'mongodb', 'ports': ['27017:27017'], 'environment': {'MONGO_INITDB_ROOT_USERNAME': 'admin', 'MONGO_INITDB_ROOT_PASSWORD': 'foobar'}}}, 'volumes': {'pythonlib': None}}"
omegaml/omegaml,latest,/docker-compose-dev.yml,"{'version': '3', 'services': {'mongo': {'image': 'mongo:3.6.8-stretch', 'ports': ['27017:27017', '28017:28017'], 'command': ['--auth', '--oplogSize', '100']}, 'rabbitmq': {'image': 'rabbitmq:3.8.9', 'ports': ['5672:5672'], 'environment': {'RABBITMQ_DEFAULT_USER': 'admin', 'RABBITMQ_DEFAULT_PASS': 'foobar'}}}}"
ubc/compair,latest,/docker-compose.yml,"{'version': '2', 'services': {'db': {'image': 'mariadb:10.5', 'environment': ['MYSQL_ROOT_PASSWORD=randompassword', 'MYSQL_DATABASE=compair', 'MYSQL_USER=compair', 'MYSQL_PASSWORD=compair'], 'volumes': ['./.data/mysql:/var/lib/mysql'], 'ports': ['13306:3306']}, 'redis': {'image': 'redis:5.0', 'command': 'redis-server --appendonly yes', 'volumes': ['./.data/redis:/data'], 'ports': ['16379:6379']}, 'app': {'image': 'ubcctlt/compair-app', 'environment': ['DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'DB_CONN_OPTIONS={""charset"":""utf8mb4""}', 'DEV=1', 'CELERY_BROKER_URL=redis://redis:6379', 'CELERY_ALWAYS_EAGER=0', 'ENFORCE_SSL=0', 'MAIL_NOTIFICATION_ENABLED=1', 'MAIL_SERVER=mail', 'MAIL_PORT=1025', 'MAIL_USERNAME=compair', 'MAIL_PASSWORD=compair', 'MAIL_DEFAULT_SENDER=compair@example.com', 'SAML_LOGIN_ENABLED=true', 'SAML_UNIQUE_IDENTIFIER=urn:oid:0.9.2342.19200300.100.1.1', 'SAML_ATTRIBUTE_USER_ROLE=https://samltest.id/attributes/role', 'SAML_INSTRUCTOR_ROLE_VALUES=employee@samltest.id', 'SAML_ATTRIBUTE_FIRST_NAME=urn:oid:2.5.4.42', 'SAML_ATTRIBUTE_LAST_NAME=urn:oid:2.5.4.4', 'SAML_ATTRIBUTE_EMAIL=urn:oid:0.9.2342.19200300.100.1.3', 'SAML_ATTRIBUTE_STUDENT_NUMBER=', 'SAML_SETTINGS_FILE=/code/deploy/development/dev_saml_settings.json', 'SAML_METADATA_URL=https://samltest.id/saml/idp', 'SAML_METADATA_ENTITY_ID=http://compair/api/saml/metadata', 'SAML_EXPOSE_METADATA_ENDPOINT=true', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}'], 'volumes': ['.:/code', './.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis', 'mail']}, 'worker': {'image': 'ubcctlt/compair-app', 'environment': ['C_FORCE_ROOT=1', 'DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'DB_CONN_OPTIONS={""charset"":""utf8mb4""}', 'DEV=1', 'CELERY_BROKER_URL=redis://redis:6379', 'CELERY_ALWAYS_EAGER=0', 'ENFORCE_SSL=0', 'MAIL_NOTIFICATION_ENABLED=1', 'MAIL_SERVER=mail', 'MAIL_PORT=1025', 'MAIL_USERNAME=compair', 'MAIL_PASSWORD=compair', 'MAIL_DEFAULT_SENDER=compair@example.com', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}'], 'volumes': ['.:/code', './.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis', 'mail'], 'command': 'celery worker --app=celery_worker.celery --loglevel=DEBUG'}, 'worker_scheduler': {'image': 'ubcctlt/compair-app', 'environment': ['C_FORCE_ROOT=1', 'DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'DB_CONN_OPTIONS={""charset"":""utf8mb4""}', 'DEV=1', 'CELERY_BROKER_URL=redis://redis:6379', 'CELERY_ALWAYS_EAGER=0', 'ENFORCE_SSL=0', 'MAIL_NOTIFICATION_ENABLED=1', 'MAIL_SERVER=mail', 'MAIL_PORT=1025', 'MAIL_USERNAME=compair', 'MAIL_PASSWORD=compair', 'MAIL_DEFAULT_SENDER=compair@example.com', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}'], 'volumes': ['.:/code', './.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis', 'mail'], 'command': 'bash -c ""rm -f celerybeat.pid && celery beat --app=celery_worker.celery --loglevel=DEBUG""'}, 'web': {'image': 'nginx:1.18', 'volumes': ['./deploy/docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro', './compair/static:/compair/app:ro'], 'ports': ['8080:80'], 'depends_on': ['app']}, 'worker_monitor': {'image': 'mher/flower', 'command': 'flower --port=5555 --broker=redis://redis:6379', 'ports': ['5555:5555'], 'depends_on': ['redis']}, 'mail': {'image': 'mailhog/mailhog:v1.0.0', 'ports': ['8025:8025']}}}"
ubc/compair,latest,/deploy/docker/docker-compose.yml,"{'version': '2.1', 'services': {'db': {'image': 'mariadb:10.1', 'environment': ['MYSQL_ROOT_PASSWORD=randompassword', 'MYSQL_DATABASE=compair', 'MYSQL_USER=compair', 'MYSQL_PASSWORD=compair'], 'volumes': ['./.data/mysql:/var/lib/mysql'], 'restart': 'always'}, 'redis': {'image': 'redis:5.0', 'command': 'redis-server --appendonly yes', 'volumes': ['./.data/redis:/data'], 'restart': 'always'}, 'app': {'image': 'ubcctlt/compair-app:${COMPAIR_VERSION:-latest}', 'environment': ['DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}', 'CELERY_BROKER_URL=redis://redis:6379', 'ASSET_LOCATION=local'], 'volumes': ['../../.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis'], 'restart': 'always'}, 'worker': {'image': 'ubcctlt/compair-app:${COMPAIR_VERSION:-latest}', 'environment': ['DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}', 'CELERY_BROKER_URL=redis://redis:6379', 'ASSET_LOCATION=local', 'C_FORCE_ROOT=1'], 'volumes': ['../../.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis'], 'restart': 'always', 'command': 'celery worker --app=celery_worker.celery --loglevel=INFO'}, 'worker_scheduler': {'image': 'ubcctlt/compair-app:${COMPAIR_VERSION:-latest}', 'environment': ['DB_DRIVER=mysql+pymysql', 'DB_USERNAME=compair', 'DB_PASSWORD=compair', 'DB_HOST=db', 'DB_PORT=3306', 'DB_NAME=compair', 'SQLALCHEMY_ENGINE_OPTIONS={""pool_recycle"":299}', 'CELERY_BROKER_URL=redis://redis:6379', 'ASSET_LOCATION=local', 'C_FORCE_ROOT=1'], 'volumes': ['../../.data/persistent:/code/persistent'], 'depends_on': ['db', 'redis'], 'restart': 'always', 'command': 'celery beat --app=celery_worker.celery --loglevel=INFO'}, 'web': {'image': 'nginx:1.11', 'volumes': ['./nginx.conf:/etc/nginx/conf.d/default.conf:ro', '../../compair/static:/compair/app:ro'], 'ports': ['80:80'], 'depends_on': ['app'], 'restart': 'always'}, 'worker_monitor': {'image': 'mher/flower', 'command': 'flower --port=5555 --broker=redis://redis:6379 --basic_auth=user1:password1', 'ports': ['5555:5555'], 'depends_on': ['redis'], 'restart': 'always'}}}"
